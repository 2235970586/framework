/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.message.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 * <Description> <br> 
 *  
 * @author yang.zhipeng <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年7月1日 <br>
 * @since V1.0<br>
 * @see com.fccfc.framework.message.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-25")
public class MessageService {

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public interface Iface {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param templateCode <br>
         * @param message <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public long sendMessage(String templateCode, Message message) throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param messageId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resendMessage(long messageId) throws org.apache.thrift.TException;

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public interface AsyncIface {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param templateCode <br>
         * @param message <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendMessage(String templateCode, Message message,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param messageId <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resendMessage(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        
        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            
            /**
             * construct
             */
            public Factory() {
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @return <br>
             */
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param oprot <br>
             * @return <br>
             */
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        /**
         * Client
         * @param prot <br>
         */
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        /**
         * Client
         * @param iprot <br>
         * @param oprot <br>
         */
        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param templateCode <br>
         * @param message <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public long sendMessage(String templateCode, Message message) throws org.apache.thrift.TException {
            sendSendMessage(templateCode, message);
            return recvSendMessage();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param templateCode <br>
         * @param message <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendSendMessage(String templateCode, Message message) throws org.apache.thrift.TException {
            SendMessageArgs args = new SendMessageArgs();
            args.setTemplateCode(templateCode);
            args.setMessage(message);
            sendBase("sendMessage", args);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public long recvSendMessage() throws org.apache.thrift.TException {
            SendMessageResult result = new SendMessageResult();
            receiveBase(result, "sendMessage");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "sendMessage failed: unknown result");
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param messageId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resendMessage(long messageId) throws org.apache.thrift.TException {
            sendResendMessage(messageId);
            recvResendMessage();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param messageId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendResendMessage(long messageId) throws org.apache.thrift.TException {
            ResendMessageArgs args = new ResendMessageArgs();
            args.setMessageId(messageId);
            sendBase("resendMessage", args);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvResendMessage() throws org.apache.thrift.TException {
            ResendMessageResult result = new ResendMessageResult();
            receiveBase(result, "resendMessage");
            return;
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        
        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            
            /**
             * clientManager
             */
            private org.apache.thrift.async.TAsyncClientManager clientManager;

            /**
             * protocolFactory
             */
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            /**
             * Factory
             * @param clientManager <br>
             * @param protocolFactory <br>
             */
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param transport <br>
             * @return <br>
             */
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        /**
         * AsyncClient
         * @param protocolFactory <br>
         * @param clientManager <br>
         * @param transport <br>
         */
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
            org.apache.thrift.async.TAsyncClientManager clientManager,
            org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param templateCode <br>
         * @param message <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendMessage(String templateCode, Message message,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            SendMessageCall method_call = new SendMessageCall(templateCode, message, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class SendMessageCall extends org.apache.thrift.async.TAsyncMethodCall {
            
            /**
             * templateCode
             */
            private String templateCode;

            /**
             * message
             */
            private Message message;

            /**
             * sendMessage_call
             * @param templateCode <br>
             * @param message <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public SendMessageCall(String templateCode, Message message,
                org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.templateCode = templateCode;
                this.message = message;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessage",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                SendMessageArgs args = new SendMessageArgs();
                args.setTemplateCode(templateCode);
                args.setMessage(message);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public long getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recvSendMessage();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param messageId <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resendMessage(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            ResendMessageCall method_call = new ResendMessageCall(messageId, resultHandler, this, ___protocolFactory,
                ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class ResendMessageCall extends org.apache.thrift.async.TAsyncMethodCall {
            
            /**
             * messageId
             */
            private long messageId;

            /**
             * resendMessage_call
             * @param messageId <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public ResendMessageCall(long messageId, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.messageId = messageId;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resendMessage",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                ResendMessageArgs args = new ResendMessageArgs();
                args.setMessageId(messageId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvResendMessage();
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements
        org.apache.thrift.TProcessor {
        
        /**
         * LOGGER
         */
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        /**
         * Processor
         * @param iface <br>
         */
        public Processor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        /**
         * Processor
         * @param iface <br>
         * @param processMap <br>
         */
        protected Processor(I iface,
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param <I> <br>
         * @param processMap <br>
         * @return <br>
         */
        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("sendMessage", new SendMessage());
            processMap.put("resendMessage", new ResendMessage());
            return processMap;
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class SendMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, SendMessageArgs> {
            
            /**
             * sendMessage
             */
            public SendMessage() {
                super("sendMessage");
            }

            public SendMessageArgs getEmptyArgsInstance() {
                return new SendMessageArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public SendMessageResult getResult(I iface, SendMessageArgs args) throws org.apache.thrift.TException {
                SendMessageResult result = new SendMessageResult();
                result.success = iface.sendMessage(args.templateCode, args.message);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class ResendMessage<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, ResendMessageArgs> {
            
            /**
             * resendMessage
             */
            public ResendMessage() {
                super("resendMessage");
            }

            public ResendMessageArgs getEmptyArgsInstance() {
                return new ResendMessageArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public ResendMessageResult getResult(I iface, ResendMessageArgs args) throws org.apache.thrift.TException {
                ResendMessageResult result = new ResendMessageResult();
                iface.resendMessage(args.messageId);
                return result;
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        
        /**
         * LOGGER
         */
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        /**
         * AsyncProcessor
         * @param iface <br>
         */
        public AsyncProcessor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        /**
         * AsyncProcessor
         * @param iface <br>
         * @param processMap <br>
         */
        protected AsyncProcessor(I iface,
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param processMap <br>
         * @param <I> <br>
         * @return <br>
         */
        private static <I extends AsyncIface> Map<String, 
                                                       org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("sendMessage", new SendMessage());
            processMap.put("resendMessage", new ResendMessage());
            return processMap;
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class SendMessage<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, SendMessageArgs, Long> {
            
            /**
             * sendMessage
             */
            public SendMessage() {
                super("sendMessage");
            }

            public SendMessageArgs getEmptyArgsInstance() {
                return new SendMessageArgs();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Long>() {
                    public void onComplete(Long o) {
                        SendMessageResult result = new SendMessageResult();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        SendMessageResult result = new SendMessageResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, SendMessageArgs args,
                org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
                iface.sendMessage(args.templateCode, args.message, resultHandler);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        public static class ResendMessage<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, ResendMessageArgs, Void> {
            
            /**
             * resendMessage
             */
            public ResendMessage() {
                super("resendMessage");
            }

            public ResendMessageArgs getEmptyArgsInstance() {
                return new ResendMessageArgs();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        ResendMessageResult result = new ResendMessageResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        ResendMessageResult result = new ResendMessageResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, ResendMessageArgs args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.resendMessage(args.messageId, resultHandler);
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public static class SendMessageArgs implements
        org.apache.thrift.TBase<SendMessageArgs, SendMessageArgs._Fields>, java.io.Serializable, Cloneable,
        Comparable<SendMessageArgs> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "SendMessageArgs");

        /**
         * TEMPLATE_CODE_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField TEMPLATE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "templateCode", org.apache.thrift.protocol.TType.STRING, (short) 1);

        /**
         * MESSAGE_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "message", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new SendMessageArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new SendMessageArgsTupleSchemeFactory());
        }

        /**
         * templateCode
         */
        public String templateCode; // required

        /**
         * message
         */
        public Message message; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * TEMPLATE_CODE
             */
            TEMPLATE_CODE((short) 1, "templateCode"), MESSAGE((short) 2, "message");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TEMPLATE_CODE
                        return TEMPLATE_CODE;
                    case 2: // MESSAGE
                        return MESSAGE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         *  isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.TEMPLATE_CODE, new org.apache.thrift.meta_data.FieldMetaData("templateCode",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Message.class)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendMessageArgs.class, META_DATA_MAP);
        }

        /**
         * SendMessageArgs
         */
        public SendMessageArgs() {
        }

        /**
         * SendMessageArgs
         * @param templateCode <br>
         * @param message <br>
         */
        public SendMessageArgs(String templateCode, Message message) {
            this();
            this.templateCode = templateCode;
            this.message = message;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public SendMessageArgs(SendMessageArgs other) {
            if (other.isSetTemplateCode()) {
                this.templateCode = other.templateCode;
            }
            if (other.isSetMessage()) {
                this.message = new Message(other.message);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public SendMessageArgs deepCopy() {
            return new SendMessageArgs(this);
        }

        @Override
        public void clear() {
            this.templateCode = null;
            this.message = null;
        }

        public String getTemplateCode() {
            return this.templateCode;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param templateCode <br>
         * @return <br>
         */
        public SendMessageArgs setTemplateCode(String templateCode) {
            this.templateCode = templateCode;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetTemplateCode() {
            this.templateCode = null;
        }

        /** Returns true if field templateCode is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetTemplateCode() {
            return this.templateCode != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setTemplateCodeIsSet(boolean value) {
            if (!value) {
                this.templateCode = null;
            }
        }

        public Message getMessage() {
            return this.message;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param message <br>
         * @return <br>
         */
        public SendMessageArgs setMessage(Message message) {
            this.message = message;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetMessage() {
            this.message = null;
        }

        /** Returns true if field message is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetMessage() {
            return this.message != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setMessageIsSet(boolean value) {
            if (!value) {
                this.message = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TEMPLATE_CODE:
                    if (value == null) {
                        unsetTemplateCode();
                    }
                    else {
                        setTemplateCode((String) value);
                    }
                    break;

                case MESSAGE:
                    if (value == null) {
                        unsetMessage();
                    }
                    else {
                        setMessage((Message) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TEMPLATE_CODE:
                    return getTemplateCode();

                case MESSAGE:
                    return getMessage();
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TEMPLATE_CODE:
                    return isSetTemplateCode();
                case MESSAGE:
                    return isSetMessage();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof SendMessageArgs) {
                return this.equals((SendMessageArgs) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(SendMessageArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_templateCode = true & this.isSetTemplateCode();
            boolean that_present_templateCode = true & that.isSetTemplateCode();
            if (this_present_templateCode || that_present_templateCode) {
                if (!(this_present_templateCode && that_present_templateCode)) {
                    return false;
                }
                if (!this.templateCode.equals(that.templateCode)) {
                    return false;
                }
            }

            boolean this_present_message = true & this.isSetMessage();
            boolean that_present_message = true & that.isSetMessage();
            if (this_present_message || that_present_message) {
                if (!(this_present_message && that_present_message)) {
                    return false;
                }
                if (!this.message.equals(that.message)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_templateCode = true & (isSetTemplateCode());
            list.add(present_templateCode);
            if (present_templateCode) {
                list.add(templateCode);
            }

            boolean present_message = true & (isSetMessage());
            list.add(present_message);
            if (present_message) {
                list.add(message);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(SendMessageArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTemplateCode()).compareTo(other.isSetTemplateCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTemplateCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateCode, other.templateCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessage()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SendMessageArgs(");
            boolean first = true;

            sb.append("templateCode:");
            if (this.templateCode == null) {
                sb.append("null");
            }
            else {
                sb.append(this.templateCode);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("message:");
            if (this.message == null) {
                sb.append("null");
            }
            else {
                sb.append(this.message);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (message != null) {
                message.validate();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageArgsStandardSchemeFactory implements SchemeFactory {
            public SendMessageArgsStandardScheme getScheme() {
                return new SendMessageArgsStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageArgsStandardScheme extends StandardScheme<SendMessageArgs> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, SendMessageArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TEMPLATE_CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.templateCode = iprot.readString();
                                struct.setTemplateCodeIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // MESSAGE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.message = new Message();
                                struct.message.read(iprot);
                                struct.setMessageIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, SendMessageArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.templateCode != null) {
                    oprot.writeFieldBegin(TEMPLATE_CODE_FIELD_DESC);
                    oprot.writeString(struct.templateCode);
                    oprot.writeFieldEnd();
                }
                if (struct.message != null) {
                    oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
                    struct.message.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageArgsTupleSchemeFactory implements SchemeFactory {
            public SendMessageArgsTupleScheme getScheme() {
                return new SendMessageArgsTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageArgsTupleScheme extends TupleScheme<SendMessageArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SendMessageArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTemplateCode()) {
                    optionals.set(0);
                }
                if (struct.isSetMessage()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetTemplateCode()) {
                    oprot.writeString(struct.templateCode);
                }
                if (struct.isSetMessage()) {
                    struct.message.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SendMessageArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.templateCode = iprot.readString();
                    struct.setTemplateCodeIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.message = new Message();
                    struct.message.read(iprot);
                    struct.setMessageIsSet(true);
                }
            }
        }

    }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
    public static class SendMessageResult implements
        org.apache.thrift.TBase<SendMessageResult, SendMessageResult._Fields>, java.io.Serializable, Cloneable,
        Comparable<SendMessageResult> {
        
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "SendMessageResult");

        /**
         * SUCCESS_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.I64, (short) 0);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new SendMessageResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new SendMessageResultTupleSchemeFactory());
        }

        /**
         * success
         */
        public long success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * SUCCESS
             */
            SUCCESS((short) 0, "success");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         *  isset id assignments
         */
        private static final int SUCCESS_ISSET_ID = 0;

        /**
         * issetBitfield
         */
        private byte issetBitfield = 0;

        /**
         * metaDataMap
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SendMessageResult.class, META_DATA_MAP);
        }

        /**
         * SendMessageResult
         */
        public SendMessageResult() {
        }

        /**
         * SendMessageResult
         * @param success <br>
         */
        public SendMessageResult(long success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public SendMessageResult(SendMessageResult other) {
            issetBitfield = other.issetBitfield;
            this.success = other.success;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public SendMessageResult deepCopy() {
            return new SendMessageResult(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = 0;
        }

        public long getSuccess() {
            return this.success;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param success <br>
         * @return <br>
         */
        public SendMessageResult setSuccess(long success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetSuccess() {
            issetBitfield = EncodingUtils.clearBit(issetBitfield, SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(issetBitfield, SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            issetBitfield = EncodingUtils.setBit(issetBitfield, SUCCESS_ISSET_ID, value);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    }
                    else {
                        setSuccess((Long) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Long.valueOf(getSuccess());
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof SendMessageResult) {
                return this.equals((SendMessageResult) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(SendMessageResult that) {
            if (that == null) {
                return false;
            }

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (this.success != that.success) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success) {
                list.add(success);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(SendMessageResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SendMessageResult(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call
                // the default constructor.
                issetBitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageResultStandardSchemeFactory implements SchemeFactory {
            public SendMessageResultStandardScheme getScheme() {
                return new SendMessageResultStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageResultStandardScheme extends StandardScheme<SendMessageResult> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, SendMessageResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, SendMessageResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageResultTupleSchemeFactory implements SchemeFactory {
            public SendMessageResultTupleScheme getScheme() {
                return new SendMessageResultTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月1日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class SendMessageResultTupleScheme extends TupleScheme<SendMessageResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SendMessageResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI64(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SendMessageResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月1日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.message.api <br>
     */
    public static class ResendMessageArgs implements
        org.apache.thrift.TBase<ResendMessageArgs, ResendMessageArgs._Fields>, java.io.Serializable, Cloneable,
        Comparable<ResendMessageArgs> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "ResendMessageArgs");

        /**
         * MESSAGE_ID_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField MESSAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "messageId", org.apache.thrift.protocol.TType.I64, (short) 1);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new ResendMessageArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new ResendMessageArgsTupleSchemeFactory());
        }

        /**
         * messageId
         */
        public long messageId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * MESSAGE_ID
             */
            MESSAGE_ID((short) 1, "messageId");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MESSAGE_ID
                        return MESSAGE_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         *  isset id assignments
         */
        private static final int MESSAGEID_ISSET_ID = 0;

        /**
         * issetBitfield
         */
        private byte issetBitfield = 0;

        /**
         * metaDataMap
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.MESSAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("messageId",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResendMessageArgs.class, META_DATA_MAP);
        }

        /**
         * ResendMessageArgs
         */
        public ResendMessageArgs() {
        }

        /**
         * ResendMessageArgs
         * @param messageId <br>
         */
        public ResendMessageArgs(long messageId) {
            this();
            this.messageId = messageId;
            setMessageIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public ResendMessageArgs(ResendMessageArgs other) {
            issetBitfield = other.issetBitfield;
            this.messageId = other.messageId;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public ResendMessageArgs deepCopy() {
            return new ResendMessageArgs(this);
        }

        @Override
        public void clear() {
            setMessageIdIsSet(false);
            this.messageId = 0;
        }

        public long getMessageId() {
            return this.messageId;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param messageId <br>
         * @return <br>
         */
        public ResendMessageArgs setMessageId(long messageId) {
            this.messageId = messageId;
            setMessageIdIsSet(true);
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetMessageId() {
            issetBitfield = EncodingUtils.clearBit(issetBitfield, MESSAGEID_ISSET_ID);
        }

        /** Returns true if field messageId is set (has been assigned a value) and false otherwise
         * @return <br> */
        public boolean isSetMessageId() {
            return EncodingUtils.testBit(issetBitfield, MESSAGEID_ISSET_ID);
        }

        public void setMessageIdIsSet(boolean value) {
            issetBitfield = EncodingUtils.setBit(issetBitfield, MESSAGEID_ISSET_ID, value);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MESSAGE_ID:
                    if (value == null) {
                        unsetMessageId();
                    }
                    else {
                        setMessageId((Long) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MESSAGE_ID:
                    return Long.valueOf(getMessageId());
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MESSAGE_ID:
                    return isSetMessageId();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof ResendMessageArgs) {
                return this.equals((ResendMessageArgs) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(ResendMessageArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_messageId = true;
            boolean that_present_messageId = true;
            if (this_present_messageId || that_present_messageId) {
                if (!(this_present_messageId && that_present_messageId)) {
                    return false;
                }
                if (this.messageId != that.messageId) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_messageId = true;
            list.add(present_messageId);
            if (present_messageId) {
                list.add(messageId);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(ResendMessageArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMessageId()).compareTo(other.isSetMessageId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMessageId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageId, other.messageId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ResendMessageArgs(");
            boolean first = true;

            sb.append("messageId:");
            sb.append(this.messageId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call
                // the default constructor.
                issetBitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageArgsStandardSchemeFactory implements SchemeFactory {
            public ResendMessageArgsStandardScheme getScheme() {
                return new ResendMessageArgsStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageArgsStandardScheme extends StandardScheme<ResendMessageArgs> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, ResendMessageArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MESSAGE_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.messageId = iprot.readI64();
                                struct.setMessageIdIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, ResendMessageArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
                oprot.writeI64(struct.messageId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageArgsTupleSchemeFactory implements SchemeFactory {
            public ResendMessageArgsTupleScheme getScheme() {
                return new ResendMessageArgsTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageArgsTupleScheme extends TupleScheme<ResendMessageArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ResendMessageArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMessageId()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetMessageId()) {
                    oprot.writeI64(struct.messageId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ResendMessageArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.messageId = iprot.readI64();
                    struct.setMessageIdIsSet(true);
                }
            }
        }

    }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
    public static class ResendMessageResult implements
        org.apache.thrift.TBase<ResendMessageResult, ResendMessageResult._Fields>, java.io.Serializable, Cloneable,
        Comparable<ResendMessageResult> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "ResendMessageResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new ResendMessageResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new ResendMessageResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * metaDataMap
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResendMessageResult.class, META_DATA_MAP);
        }

        /**
         * ResendMessageResult
         */
        public ResendMessageResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public ResendMessageResult(ResendMessageResult other) {
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public ResendMessageResult deepCopy() {
            return new ResendMessageResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof ResendMessageResult) {
                return this.equals((ResendMessageResult) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(ResendMessageResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(ResendMessageResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ResendMessageResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageResultStandardSchemeFactory implements SchemeFactory {
            public ResendMessageResultStandardScheme getScheme() {
                return new ResendMessageResultStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageResultStandardScheme extends StandardScheme<ResendMessageResult> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, ResendMessageResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, ResendMessageResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageResultTupleSchemeFactory implements SchemeFactory {
            public ResendMessageResultTupleScheme getScheme() {
                return new ResendMessageResultTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月2日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.message.api <br>
         */
        private static class ResendMessageResultTupleScheme extends TupleScheme<ResendMessageResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ResendMessageResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ResendMessageResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

}
