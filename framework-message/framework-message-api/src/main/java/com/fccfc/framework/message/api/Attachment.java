/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.message.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * <Description> <br>
 * 
 * @author yang.zhipeng <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年7月1日 <br>
 * @since V7.3<br>
 * @see com.fccfc.framework.message.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-25")
public class Attachment implements org.apache.thrift.TBase<Attachment, Attachment._Fields>, java.io.Serializable,
    Cloneable, Comparable<Attachment> {

    /**
     * STRUCT_DESC
     */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "Attachment");

    /**
     * ID_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id",
        org.apache.thrift.protocol.TType.I64, (short) 1);

    /**
     * TYPE_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "type", org.apache.thrift.protocol.TType.STRING, (short) 2);

    /**
     * NAME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "name", org.apache.thrift.protocol.TType.STRING, (short) 3);

    /**
     * FILE_SIZE_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "fileSize", org.apache.thrift.protocol.TType.I64, (short) 5);

    /**
     * URL_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "url", org.apache.thrift.protocol.TType.STRING, (short) 6);

    /**
     * schemes
     */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new AttachmentStandardSchemeFactory());
        schemes.put(TupleScheme.class, new AttachmentTupleSchemeFactory());
    }

    /**
     * id
     */
    public long id; // optional

    /**
     * type
     */
    public String type; // required

    /**
     * name
     */
    public String name; // optional

    /**
     * fileSize
     */
    public long fileSize; // optional

    /**
     * url
     */
    public String url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        /**
         * ID
         */
        ID((short) 1, "id"),

        /**
         * TYPE
         */
        TYPE((short) 2, "type"),

        /**
         * NAME
         */
        NAME((short) 3, "name"),

        /**
         * FILE_SIZE
         */
        FILE_SIZE((short) 5, "fileSize"),

        /**
         * URL
         */
        URL((short) 6, "url");

        /**
         * byName
         */
        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         * 
         * @param fieldId <br>
         * @return <br>
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ID
                    return ID;
                case 2: // TYPE
                    return TYPE;
                case 3: // NAME
                    return NAME;
                case 5: // FILE_SIZE
                    return FILE_SIZE;
                case 6: // URL
                    return URL;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         * @param fieldId <br>
         * @return <br>
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         * @param name <br>
         * @return <br>
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        /**
         * _thriftId
         */
        private final short _thriftId;

        /**
         * _fieldName
         */
        private final String _fieldName;

        /**
         * _Fields
         * @param thriftId <br>
         * @param fieldName <br>
         */
        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    /**
     *  isset id assignments
     */
    private static final int __ID_ISSET_ID = 0;

    /**
     * __FILESIZE_ISSET_ID
     */
    private static final int __FILESIZE_ISSET_ID = 1;

    /**
     * __isset_bitfield
     */
    private byte __isset_bitfield = 0;

    /**
     * optionals
     */
    private static final _Fields optionals[] = {
        _Fields.ID, _Fields.NAME, _Fields.FILE_SIZE
    };

    /**
     * metaDataMap
     */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
            _Fields.class);
        tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Attachment.class, metaDataMap);
    }

    /**
     * Attachment
     */
    public Attachment() {
    }

    /**
     * Attachment
     * @param type <br>
     * @param url <br>
     */
    public Attachment(String type, String url) {
        this();
        this.type = type;
        this.url = url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     * @param other <br>
     */
    public Attachment(Attachment other) {
        __isset_bitfield = other.__isset_bitfield;
        this.id = other.id;
        if (other.isSetType()) {
            this.type = other.type;
        }
        if (other.isSetName()) {
            this.name = other.name;
        }
        this.fileSize = other.fileSize;
        if (other.isSetUrl()) {
            this.url = other.url;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @return <br>
     */
    public Attachment deepCopy() {
        return new Attachment(this);
    }

    @Override
    public void clear() {
        setIdIsSet(false);
        this.id = 0;
        this.type = null;
        this.name = null;
        setFileSizeIsSet(false);
        this.fileSize = 0;
        this.url = null;
    }

    public long getId() {
        return this.id;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param id <br>
     * @return <br>
     */
    public Attachment setId(long id) {
        this.id = id;
        setIdIsSet(true);
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetId() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetId() {
        return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public String getType() {
        return this.type;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param type <br>
     * @return <br>
     */
    public Attachment setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetType() {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetType() {
        return this.type != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setTypeIsSet(boolean value) {
        if (!value) {
            this.type = null;
        }
    }

    public String getName() {
        return this.name;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param name <br>
     * @return <br>
     */
    public Attachment setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetName() {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetName() {
        return this.name != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setNameIsSet(boolean value) {
        if (!value) {
            this.name = null;
        }
    }

    public long getFileSize() {
        return this.fileSize;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param fileSize <br>
     * @return <br>
     */
    public Attachment setFileSize(long fileSize) {
        this.fileSize = fileSize;
        setFileSizeIsSet(true);
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetFileSize() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
    }

    /** Returns true if field fileSize is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetFileSize() {
        return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
    }

    public void setFileSizeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
    }

    public String getUrl() {
        return this.url;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param url <br>
     * @return <br>
     */
    public Attachment setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetUrl() {
        this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetUrl() {
        return this.url != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setUrlIsSet(boolean value) {
        if (!value) {
            this.url = null;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param field <br>
     * @param value <br>
     */
    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ID:
                if (value == null) {
                    unsetId();
                }
                else {
                    setId((Long) value);
                }
                break;

            case TYPE:
                if (value == null) {
                    unsetType();
                }
                else {
                    setType((String) value);
                }
                break;

            case NAME:
                if (value == null) {
                    unsetName();
                }
                else {
                    setName((String) value);
                }
                break;

            case FILE_SIZE:
                if (value == null) {
                    unsetFileSize();
                }
                else {
                    setFileSize((Long) value);
                }
                break;

            case URL:
                if (value == null) {
                    unsetUrl();
                }
                else {
                    setUrl((String) value);
                }
                break;
            default:;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param field <br>
     * @return <br>
     */
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ID:
                return Long.valueOf(getId());

            case TYPE:
                return getType();

            case NAME:
                return getName();

            case FILE_SIZE:
                return Long.valueOf(getFileSize());

            case URL:
                return getUrl();
            default:;
        }
        throw new IllegalStateException();
    }

    /** Returns tre if field corresponding to fieldID is set (has been assigned a value) and false otherwise 
     * @param field <br>
     * @return <br>
     * */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ID:
                return isSetId();
            case TYPE:
                return isSetType();
            case NAME:
                return isSetName();
            case FILE_SIZE:
                return isSetFileSize();
            case URL:
                return isSetUrl();
            default:;
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null) {
            return false;
        }
        if (that instanceof Attachment) {
            return this.equals((Attachment) that);
        }
        return false;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param that <br>
     * @return <br>
     */
    public boolean equals(Attachment that) {
        if (that == null) {
            return false;
        }

        boolean this_present_id = true & this.isSetId();
        boolean that_present_id = true & that.isSetId();
        if (this_present_id || that_present_id) {
            if (!(this_present_id && that_present_id)) {
                return false;
            }
            if (this.id != that.id) {
                return false;
            }
        }

        boolean this_present_type = true & this.isSetType();
        boolean that_present_type = true & that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type)) {
                return false;
            }
            if (!this.type.equals(that.type)) {
                return false;
            }
        }

        boolean this_present_name = true & this.isSetName();
        boolean that_present_name = true & that.isSetName();
        if (this_present_name || that_present_name) {
            if (!(this_present_name && that_present_name)) {
                return false;
            }
            if (!this.name.equals(that.name)) {
                return false;
            }
        }

        boolean this_present_fileSize = true & this.isSetFileSize();
        boolean that_present_fileSize = true & that.isSetFileSize();
        if (this_present_fileSize || that_present_fileSize) {
            if (!(this_present_fileSize && that_present_fileSize)) {
                return false;
            }
            if (this.fileSize != that.fileSize) {
                return false;
            }
        }

        boolean this_present_url = true & this.isSetUrl();
        boolean that_present_url = true & that.isSetUrl();
        if (this_present_url || that_present_url) {
            if (!(this_present_url && that_present_url)) {
                return false;
            }
            if (!this.url.equals(that.url)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_id = true & (isSetId());
        list.add(present_id);
        if (present_id) {
            list.add(id);
        }

        boolean present_type = true & (isSetType());
        list.add(present_type);
        if (present_type) {
            list.add(type);
        }

        boolean present_name = true & (isSetName());
        list.add(present_name);
        if (present_name) {
            list.add(name);
        }

        boolean present_fileSize = true & (isSetFileSize());
        list.add(present_fileSize);
        if (present_fileSize) {
            list.add(fileSize);
        }

        boolean present_url = true & (isSetUrl());
        list.add(present_url);
        if (present_url) {
            list.add(url);
        }

        return list.hashCode();
    }

    @Override
    public int compareTo(Attachment other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetFileSize()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUrl()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param fieldId <br>
     * @return <br>
     */
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param iprot <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param oprot <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Attachment(");
        boolean first = true;

        if (isSetId()) {
            sb.append("id:");
            sb.append(this.id);
            first = false;
        }
        if (!first) {
            sb.append(", ");
        }
        sb.append("type:");
        if (this.type == null) {
            sb.append("null");
        }
        else {
            sb.append(this.type);
        }
        first = false;
        if (isSetName()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("name:");
            if (this.name == null) {
                sb.append("null");
            }
            else {
                sb.append(this.name);
            }
            first = false;
        }
        if (isSetFileSize()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("fileSize:");
            sb.append(this.fileSize);
            first = false;
        }
        if (!first) {
            sb.append(", ");
        }
        sb.append("url:");
        if (this.url == null) {
            sb.append("null");
        }
        else {
            sb.append(this.url);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (type == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: "
                + toString());
        }
        if (url == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: "
                + toString());
        }
        // check for sub-struct validity
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param out <br>
     * @throws java.io.IOException <br>
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
                out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param in <br>
     * @throws java.io.IOException <br>
     * @throws ClassNotFoundException <br>
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the
            // default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class AttachmentStandardSchemeFactory implements SchemeFactory {
        public AttachmentStandardScheme getScheme() {
            return new AttachmentStandardScheme();
        }
    }

    private static class AttachmentStandardScheme extends StandardScheme<Attachment> {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @param struct <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot, Attachment struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.id = iprot.readI64();
                            struct.setIdIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.type = iprot.readString();
                            struct.setTypeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // FILE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.fileSize = iprot.readI64();
                            struct.setFileSizeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // URL
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.url = iprot.readString();
                            struct.setUrlIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @param struct <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot, Attachment struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetId()) {
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI64(struct.id);
                oprot.writeFieldEnd();
            }
            if (struct.type != null) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeString(struct.type);
                oprot.writeFieldEnd();
            }
            if (struct.name != null) {
                if (struct.isSetName()) {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.isSetFileSize()) {
                oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
                oprot.writeI64(struct.fileSize);
                oprot.writeFieldEnd();
            }
            if (struct.url != null) {
                oprot.writeFieldBegin(URL_FIELD_DESC);
                oprot.writeString(struct.url);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class AttachmentTupleSchemeFactory implements SchemeFactory {
        public AttachmentTupleScheme getScheme() {
            return new AttachmentTupleScheme();
        }
    }

    private static class AttachmentTupleScheme extends TupleScheme<Attachment> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Attachment struct)
            throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.type);
            oprot.writeString(struct.url);
            BitSet optionals = new BitSet();
            if (struct.isSetId()) {
                optionals.set(0);
            }
            if (struct.isSetName()) {
                optionals.set(1);
            }
            if (struct.isSetFileSize()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetId()) {
                oprot.writeI64(struct.id);
            }
            if (struct.isSetName()) {
                oprot.writeString(struct.name);
            }
            if (struct.isSetFileSize()) {
                oprot.writeI64(struct.fileSize);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Attachment struct)
            throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.type = iprot.readString();
            struct.setTypeIsSet(true);
            struct.url = iprot.readString();
            struct.setUrlIsSet(true);
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.id = iprot.readI64();
                struct.setIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(2)) {
                struct.fileSize = iprot.readI64();
                struct.setFileSizeIsSet(true);
            }
        }
    }

}
