/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hbasesoft.framework.message.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * 
 * <Description> <br> 
 *  
 * @author yang.zhipeng <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年7月1日 <br>
 * @since V1.0<br>
 * @see com.hbasesoft.framework.message.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-25")
public class Message implements org.apache.thrift.TBase<Message, Message._Fields>, java.io.Serializable, Cloneable,
    Comparable<Message> {
    
    /**
     * STRUCT_DESC
     */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "Message");

    /**
     * RECEIVERS_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField RECEIVERS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "receivers", org.apache.thrift.protocol.TType.LIST, (short) 1);

    /**
     * SENDER_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "sender", org.apache.thrift.protocol.TType.STRING, (short) 2);

    /**
     * SUBJECT_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "subject", org.apache.thrift.protocol.TType.STRING, (short) 3);

    /**
     * MESSAGE_TYPE_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "messageType", org.apache.thrift.protocol.TType.STRING, (short) 4);

    /**
     * EXTEND_ATTRS_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField EXTEND_ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "extendAttrs", org.apache.thrift.protocol.TType.STRING, (short) 5);

    /**
     * ATTACHMENTS_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField ATTACHMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "attachments", org.apache.thrift.protocol.TType.LIST, (short) 6);

    /**
     * PARAMS_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "params", org.apache.thrift.protocol.TType.MAP, (short) 7);

    /**
     * SCHEMES
     */
    private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        SCHEMES.put(StandardScheme.class, new MessageStandardSchemeFactory());
        SCHEMES.put(TupleScheme.class, new MessageTupleSchemeFactory());
    }

    /**
     * receivers
     */
    public List<String> receivers; // required

    /**
     * sender
     */
    public String sender; // required

    /**
     * subject
     */
    public String subject; // optional

    /**
     * messageType
     */
    public String messageType; // optional

    /**
     * extendAttrs
     */
    public String extendAttrs; // optional

    /**
     * attachments
     */
    public List<Attachment> attachments; // optional

    /**
     * params
     */
    public Map<String, String> params; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        /**
         * RECEIVERS
         */
        RECEIVERS((short) 1, "receivers"), SENDER((short) 2, "sender"), SUBJECT((short) 3, "subject"), MESSAGE_TYPE(
            (short) 4, "messageType"),
        
        /**
         * EXTEND_ATTRS
         */
        EXTEND_ATTRS((short) 5, "extendAttrs"), ATTACHMENTS((short) 6, "attachments"), PARAMS(
            (short) 7, "params");

        /**
         * BY_NAME
         */
        private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                BY_NAME.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         * @param fieldId <br>
         * @return <br>
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // RECEIVERS
                    return RECEIVERS;
                case 2: // SENDER
                    return SENDER;
                case 3: // SUBJECT
                    return SUBJECT;
                case 4: // MESSAGE_TYPE
                    return MESSAGE_TYPE;
                case 5: // EXTEND_ATTRS
                    return EXTEND_ATTRS;
                case 6: // ATTACHMENTS
                    return ATTACHMENTS;
                case 7: // PARAMS
                    return PARAMS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         * @param fieldId <br>
         * @return <br>
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         * @param name <br>
         * @return <br>
         */
        public static _Fields findBYNAME(String name) {
            return BY_NAME.get(name);
        }

        /**
         * thriftId
         */
        private final short thriftId;

        /**
         * fieldName
         */
        private final String fieldName;

        /**
         * _Fields
         * @param thriftId <br>
         * @param fieldName <br>
         */
        _Fields(short thriftId, String fieldName) {
            this.thriftId = thriftId;
            this.fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return thriftId;
        }

        public String getFieldName() {
            return fieldName;
        }
    }

    /**
     *  isset id assignments
     */
    private static final _Fields OPTIONALS[] = {
        _Fields.SUBJECT, _Fields.MESSAGE_TYPE, _Fields.EXTEND_ATTRS, _Fields.ATTACHMENTS, _Fields.PARAMS
    };

    /**
     * metaDataMap
     */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
            _Fields.class);
        tmpMap.put(_Fields.RECEIVERS, new org.apache.thrift.meta_data.FieldMetaData("receivers",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING))));
        tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("sender",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.EXTEND_ATTRS, new org.apache.thrift.meta_data.FieldMetaData("extendAttrs",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ATTACHMENTS, new org.apache.thrift.meta_data.FieldMetaData("attachments",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.ListMetaData(
                org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Attachment.class))));
        tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.MapMetaData(
                org.apache.thrift.protocol.TType.MAP, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING), new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING))));
        META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Message.class, META_DATA_MAP);
    }

    /**
     * Message
     */
    public Message() {
    }

    /**
     * Message
     * @param receivers <br>
     * @param sender <br>
     */
    public Message(List<String> receivers, String sender) {
        this();
        this.receivers = receivers;
        this.sender = sender;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     * @param other <br>
     */
    public Message(Message other) {
        if (other.isSetReceivers()) {
            List<String> __this__receivers = new ArrayList<String>(other.receivers);
            this.receivers = __this__receivers;
        }
        if (other.isSetSender()) {
            this.sender = other.sender;
        }
        if (other.isSetSubject()) {
            this.subject = other.subject;
        }
        if (other.isSetMessageType()) {
            this.messageType = other.messageType;
        }
        if (other.isSetExtendAttrs()) {
            this.extendAttrs = other.extendAttrs;
        }
        if (other.isSetAttachments()) {
            List<Attachment> __this__attachments = new ArrayList<Attachment>(other.attachments.size());
            for (Attachment other_element : other.attachments) {
                __this__attachments.add(new Attachment(other_element));
            }
            this.attachments = __this__attachments;
        }
        if (other.isSetParams()) {
            Map<String, String> __this__params = new HashMap<String, String>(other.params);
            this.params = __this__params;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @return <br>
     */
    public Message deepCopy() {
        return new Message(this);
    }

    @Override
    public void clear() {
        this.receivers = null;
        this.sender = null;
        this.subject = null;
        this.messageType = null;
        this.extendAttrs = null;
        this.attachments = null;
        this.params = null;
    }

    public int getReceiversSize() {
        return (this.receivers == null) ? 0 : this.receivers.size();
    }

    public java.util.Iterator<String> getReceiversIterator() {
        return (this.receivers == null) ? null : this.receivers.iterator();
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param elem <br>
     */
    public void addToReceivers(String elem) {
        if (this.receivers == null) {
            this.receivers = new ArrayList<String>();
        }
        this.receivers.add(elem);
    }

    public List<String> getReceivers() {
        return this.receivers;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param receivers <br>
     * @return <br>
     */
    public Message setReceivers(List<String> receivers) {
        this.receivers = receivers;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetReceivers() {
        this.receivers = null;
    }

    /** Returns true if field receivers is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetReceivers() {
        return this.receivers != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setReceiversIsSet(boolean value) {
        if (!value) {
            this.receivers = null;
        }
    }

    public String getSender() {
        return this.sender;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param sender <br>
     * @return <br>
     */
    public Message setSender(String sender) {
        this.sender = sender;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetSender() {
        this.sender = null;
    }

    /** Returns true if field sender is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetSender() {
        return this.sender != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setSenderIsSet(boolean value) {
        if (!value) {
            this.sender = null;
        }
    }

    public String getSubject() {
        return this.subject;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param subject <br>
     * @return <br>
     */
    public Message setSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetSubject() {
        this.subject = null;
    }

    /** Returns true if field subject is set (has been assigned a value) and false otherwise 
     * @return <br>
     * */
    public boolean isSetSubject() {
        return this.subject != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setSubjectIsSet(boolean value) {
        if (!value) {
            this.subject = null;
        }
    }

    public String getMessageType() {
        return this.messageType;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param messageType <br>
     * @return <br>
     */
    public Message setMessageType(String messageType) {
        this.messageType = messageType;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetMessageType() {
        this.messageType = null;
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetMessageType() {
        return this.messageType != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setMessageTypeIsSet(boolean value) {
        if (!value) {
            this.messageType = null;
        }
    }

    public String getExtendAttrs() {
        return this.extendAttrs;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param extendAttrs <br>
     * @return <br>
     */
    public Message setExtendAttrs(String extendAttrs) {
        this.extendAttrs = extendAttrs;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetExtendAttrs() {
        this.extendAttrs = null;
    }

    /** Returns true if field extendAttrs is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetExtendAttrs() {
        return this.extendAttrs != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setExtendAttrsIsSet(boolean value) {
        if (!value) {
            this.extendAttrs = null;
        }
    }

    public int getAttachmentsSize() {
        return (this.attachments == null) ? 0 : this.attachments.size();
    }

    public java.util.Iterator<Attachment> getAttachmentsIterator() {
        return (this.attachments == null) ? null : this.attachments.iterator();
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param elem <br>
     */
    public void addToAttachments(Attachment elem) {
        if (this.attachments == null) {
            this.attachments = new ArrayList<Attachment>();
        }
        this.attachments.add(elem);
    }

    public List<Attachment> getAttachments() {
        return this.attachments;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param attachments <br>
     * @return <br>
     */
    public Message setAttachments(List<Attachment> attachments) {
        this.attachments = attachments;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetAttachments() {
        this.attachments = null;
    }

    /** Returns true if field attachments is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetAttachments() {
        return this.attachments != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setAttachmentsIsSet(boolean value) {
        if (!value) {
            this.attachments = null;
        }
    }

    public int getParamsSize() {
        return (this.params == null) ? 0 : this.params.size();
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param key <br>
     * @param val <br>
     */
    public void putToParams(String key, String val) {
        if (this.params == null) {
            this.params = new HashMap<String, String>();
        }
        this.params.put(key, val);
    }

    public Map<String, String> getParams() {
        return this.params;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param params <br>
     * @return <br>
     */
    public Message setParams(Map<String, String> params) {
        this.params = params;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetParams() {
        this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetParams() {
        return this.params != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setParamsIsSet(boolean value) {
        if (!value) {
            this.params = null;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param field <br>
     * @param value <br>
     */
    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case RECEIVERS:
                if (value == null) {
                    unsetReceivers();
                }
                else {
                    setReceivers((List<String>) value);
                }
                break;

            case SENDER:
                if (value == null) {
                    unsetSender();
                }
                else {
                    setSender((String) value);
                }
                break;

            case SUBJECT:
                if (value == null) {
                    unsetSubject();
                }
                else {
                    setSubject((String) value);
                }
                break;

            case MESSAGE_TYPE:
                if (value == null) {
                    unsetMessageType();
                }
                else {
                    setMessageType((String) value);
                }
                break;

            case EXTEND_ATTRS:
                if (value == null) {
                    unsetExtendAttrs();
                }
                else {
                    setExtendAttrs((String) value);
                }
                break;

            case ATTACHMENTS:
                if (value == null) {
                    unsetAttachments();
                }
                else {
                    setAttachments((List<Attachment>) value);
                }
                break;

            case PARAMS:
                if (value == null) {
                    unsetParams();
                }
                else {
                    setParams((Map<String, String>) value);
                }
                break;
            default:;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param field <br>
     * @return <br>
     */
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case RECEIVERS:
                return getReceivers();

            case SENDER:
                return getSender();

            case SUBJECT:
                return getSubject();

            case MESSAGE_TYPE:
                return getMessageType();

            case EXTEND_ATTRS:
                return getExtendAttrs();

            case ATTACHMENTS:
                return getAttachments();

            case PARAMS:
                return getParams();
            default:;
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     * @param field <br>
     * @return <br>
     *  */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case RECEIVERS:
                return isSetReceivers();
            case SENDER:
                return isSetSender();
            case SUBJECT:
                return isSetSubject();
            case MESSAGE_TYPE:
                return isSetMessageType();
            case EXTEND_ATTRS:
                return isSetExtendAttrs();
            case ATTACHMENTS:
                return isSetAttachments();
            case PARAMS:
                return isSetParams();
            default:;
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null) {
            return false;
        }
        if (that instanceof Message) {
            return this.equals((Message) that);
        }
        return false;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param that <br>
     * @return <br>
     */
    public boolean equals(Message that) {
        if (that == null) {
            return false;
        }

        boolean this_present_receivers = true & this.isSetReceivers();
        boolean that_present_receivers = true & that.isSetReceivers();
        if (this_present_receivers || that_present_receivers) {
            if (!(this_present_receivers && that_present_receivers)) {
                return false;
            }
            if (!this.receivers.equals(that.receivers)) {
                return false;
            }
        }

        boolean this_present_sender = true & this.isSetSender();
        boolean that_present_sender = true & that.isSetSender();
        if (this_present_sender || that_present_sender) {
            if (!(this_present_sender && that_present_sender)) {
                return false;
            }
            if (!this.sender.equals(that.sender)) {
                return false;
            }
        }

        boolean this_present_subject = true & this.isSetSubject();
        boolean that_present_subject = true & that.isSetSubject();
        if (this_present_subject || that_present_subject) {
            if (!(this_present_subject && that_present_subject)) {
                return false;
            }
            if (!this.subject.equals(that.subject)) {
                return false;
            }
        }

        boolean this_present_messageType = true & this.isSetMessageType();
        boolean that_present_messageType = true & that.isSetMessageType();
        if (this_present_messageType || that_present_messageType) {
            if (!(this_present_messageType && that_present_messageType)) {
                return false;
            }
            if (!this.messageType.equals(that.messageType)) {
                return false;
            }
        }

        boolean this_present_extendAttrs = true & this.isSetExtendAttrs();
        boolean that_present_extendAttrs = true & that.isSetExtendAttrs();
        if (this_present_extendAttrs || that_present_extendAttrs) {
            if (!(this_present_extendAttrs && that_present_extendAttrs)) {
                return false;
            }
            if (!this.extendAttrs.equals(that.extendAttrs)) {
                return false;
            }
        }

        boolean this_present_attachments = true & this.isSetAttachments();
        boolean that_present_attachments = true & that.isSetAttachments();
        if (this_present_attachments || that_present_attachments) {
            if (!(this_present_attachments && that_present_attachments)) {
                return false;
            }
            if (!this.attachments.equals(that.attachments)) {
                return false;
            }
        }

        boolean this_present_params = true & this.isSetParams();
        boolean that_present_params = true & that.isSetParams();
        if (this_present_params || that_present_params) {
            if (!(this_present_params && that_present_params)) {
                return false;
            }
            if (!this.params.equals(that.params)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_receivers = true & (isSetReceivers());
        list.add(present_receivers);
        if (present_receivers) {
            list.add(receivers);
        }

        boolean present_sender = true & (isSetSender());
        list.add(present_sender);
        if (present_sender) {
            list.add(sender);
        }

        boolean present_subject = true & (isSetSubject());
        list.add(present_subject);
        if (present_subject) {
            list.add(subject);
        }

        boolean present_messageType = true & (isSetMessageType());
        list.add(present_messageType);
        if (present_messageType) {
            list.add(messageType);
        }

        boolean present_extendAttrs = true & (isSetExtendAttrs());
        list.add(present_extendAttrs);
        if (present_extendAttrs) {
            list.add(extendAttrs);
        }

        boolean present_attachments = true & (isSetAttachments());
        list.add(present_attachments);
        if (present_attachments) {
            list.add(attachments);
        }

        boolean present_params = true & (isSetParams());
        list.add(present_params);
        if (present_params) {
            list.add(params);
        }

        return list.hashCode();
    }

    @Override
    public int compareTo(Message other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetReceivers()).compareTo(other.isSetReceivers());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetReceivers()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivers, other.receivers);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSender()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sender, other.sender);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetSubject()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(other.isSetMessageType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMessageType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, other.messageType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetExtendAttrs()).compareTo(other.isSetExtendAttrs());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetExtendAttrs()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendAttrs, other.extendAttrs);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAttachments()).compareTo(other.isSetAttachments());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAttachments()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachments, other.attachments);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParams()).compareTo(other.isSetParams());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParams()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, other.params);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param fieldId <br>
     * @return <br>
     */
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param iprot <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param oprot <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Message(");
        boolean first = true;

        sb.append("receivers:");
        if (this.receivers == null) {
            sb.append("null");
        }
        else {
            sb.append(this.receivers);
        }
        first = false;
        if (!first) {
            sb.append(", ");
        }
        sb.append("sender:");
        if (this.sender == null) {
            sb.append("null");
        }
        else {
            sb.append(this.sender);
        }
        first = false;
        if (isSetSubject()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("subject:");
            if (this.subject == null) {
                sb.append("null");
            }
            else {
                sb.append(this.subject);
            }
            first = false;
        }
        if (isSetMessageType()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("messageType:");
            if (this.messageType == null) {
                sb.append("null");
            }
            else {
                sb.append(this.messageType);
            }
            first = false;
        }
        if (isSetExtendAttrs()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("extendAttrs:");
            if (this.extendAttrs == null) {
                sb.append("null");
            }
            else {
                sb.append(this.extendAttrs);
            }
            first = false;
        }
        if (isSetAttachments()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("attachments:");
            if (this.attachments == null) {
                sb.append("null");
            }
            else {
                sb.append(this.attachments);
            }
            first = false;
        }
        if (isSetParams()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("params:");
            if (this.params == null) {
                sb.append("null");
            }
            else {
                sb.append(this.params);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (receivers == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'receivers' was not present! Struct: " + toString());
        }
        if (sender == null) {
            throw new org.apache.thrift.protocol.TProtocolException("Required field 'sender' was not present! Struct: "
                + toString());
        }
        // check for sub-struct validity
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param out <br>
     * @throws java.io.IOException <br>
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
                out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param in <br>
     * @throws java.io.IOException <br>
     * @throws ClassNotFoundException <br>
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class MessageStandardSchemeFactory implements SchemeFactory {
        public MessageStandardScheme getScheme() {
            return new MessageStandardScheme();
        }
    }

    private static class MessageStandardScheme extends StandardScheme<Message> {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @param struct <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot, Message struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // RECEIVERS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                            struct.receivers = new ArrayList<String>(_list0.size);
                            String _elem1;
                            for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                _elem1 = iprot.readString();
                                struct.receivers.add(_elem1);
                            }
                            iprot.readListEnd();
                            struct.setReceiversIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // SENDER
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.sender = iprot.readString();
                            struct.setSenderIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // SUBJECT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.subject = iprot.readString();
                            struct.setSubjectIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // MESSAGE_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.messageType = iprot.readString();
                            struct.setMessageTypeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // EXTEND_ATTRS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.extendAttrs = iprot.readString();
                            struct.setExtendAttrsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // ATTACHMENTS
                        if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                            org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                            struct.attachments = new ArrayList<Attachment>(_list3.size);
                            Attachment _elem4;
                            for (int _i5 = 0; _i5 < _list3.size; ++_i5) {
                                _elem4 = new Attachment();
                                _elem4.read(iprot);
                                struct.attachments.add(_elem4);
                                iprot.readListEnd();
                            }
                            struct.setAttachmentsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // PARAMS
                        if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                            org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                            struct.params = new HashMap<String, String>(2 * _map6.size);
                            String _key7;
                            String _val8;
                            for (int _i9 = 0; _i9 < _map6.size; ++_i9) {
                                _key7 = iprot.readString();
                                _val8 = iprot.readString();
                                struct.params.put(_key7, _val8);
                            }
                            iprot.readMapEnd();
                            struct.setParamsIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @param struct <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot, Message struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.receivers != null) {
                oprot.writeFieldBegin(RECEIVERS_FIELD_DESC);
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING,
                    struct.receivers.size()));
                for (String _iter10 : struct.receivers) {
                    oprot.writeString(_iter10);
                }
                oprot.writeListEnd();
                oprot.writeFieldEnd();
            }
            if (struct.sender != null) {
                oprot.writeFieldBegin(SENDER_FIELD_DESC);
                oprot.writeString(struct.sender);
                oprot.writeFieldEnd();
            }
            if (struct.subject != null) {
                if (struct.isSetSubject()) {
                    oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
                    oprot.writeString(struct.subject);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.messageType != null) {
                if (struct.isSetMessageType()) {
                    oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
                    oprot.writeString(struct.messageType);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.extendAttrs != null) {
                if (struct.isSetExtendAttrs()) {
                    oprot.writeFieldBegin(EXTEND_ATTRS_FIELD_DESC);
                    oprot.writeString(struct.extendAttrs);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.attachments != null) {
                if (struct.isSetAttachments()) {
                    oprot.writeFieldBegin(ATTACHMENTS_FIELD_DESC);
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                        org.apache.thrift.protocol.TType.STRUCT, struct.attachments.size()));
                    for (Attachment _iter11 : struct.attachments) {
                        _iter11.write(oprot);
                    }
                    oprot.writeListEnd();
                    oprot.writeFieldEnd();
                }
            }
            if (struct.params != null) {
                if (struct.isSetParams()) {
                    oprot.writeFieldBegin(PARAMS_FIELD_DESC);
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(
                        org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING,
                        struct.params.size()));
                    for (Map.Entry<String, String> _iter12 : struct.params.entrySet()) {
                        oprot.writeString(_iter12.getKey());
                        oprot.writeString(_iter12.getValue());
                    }
                    oprot.writeMapEnd();
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class MessageTupleSchemeFactory implements SchemeFactory {
        public MessageTupleScheme getScheme() {
            return new MessageTupleScheme();
        }
    }

    private static class MessageTupleScheme extends TupleScheme<Message> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Message struct)
            throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeI32(struct.receivers.size());
            for (String _iter13 : struct.receivers) {
                oprot.writeString(_iter13);
            }
            oprot.writeString(struct.sender);
            BitSet optionals = new BitSet();
            if (struct.isSetSubject()) {
                optionals.set(0);
            }
            if (struct.isSetMessageType()) {
                optionals.set(1);
            }
            if (struct.isSetExtendAttrs()) {
                optionals.set(2);
            }
            if (struct.isSetAttachments()) {
                optionals.set(3);
            }
            if (struct.isSetParams()) {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetSubject()) {
                oprot.writeString(struct.subject);
            }
            if (struct.isSetMessageType()) {
                oprot.writeString(struct.messageType);
            }
            if (struct.isSetExtendAttrs()) {
                oprot.writeString(struct.extendAttrs);
            }
            if (struct.isSetAttachments()) {
                oprot.writeI32(struct.attachments.size());
                for (Attachment _iter14 : struct.attachments) {
                    _iter14.write(oprot);
                }
            }
            if (struct.isSetParams()) {
                oprot.writeI32(struct.params.size());
                for (Map.Entry<String, String> _iter15 : struct.params.entrySet()) {
                    oprot.writeString(_iter15.getKey());
                    oprot.writeString(_iter15.getValue());
                }
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Message struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            org.apache.thrift.protocol.TList _list16 = new org.apache.thrift.protocol.TList(
                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.receivers = new ArrayList<String>(_list16.size);
            String _elem17;
            for (int _i18 = 0; _i18 < _list16.size; ++_i18) {
                _elem17 = iprot.readString();
                struct.receivers.add(_elem17);
            }
            struct.setReceiversIsSet(true);
            struct.sender = iprot.readString();
            struct.setSenderIsSet(true);
            BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0)) {
                struct.subject = iprot.readString();
                struct.setSubjectIsSet(true);
            }
            if (incoming.get(1)) {
                struct.messageType = iprot.readString();
                struct.setMessageTypeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.extendAttrs = iprot.readString();
                struct.setExtendAttrsIsSet(true);
            }
            if (incoming.get(3)) {
                org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(
                    org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                struct.attachments = new ArrayList<Attachment>(_list19.size);
                Attachment _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21) {
                    _elem20 = new Attachment();
                    _elem20.read(iprot);
                    struct.attachments.add(_elem20);
                }
                struct.setAttachmentsIsSet(true);
            }
            if (incoming.get(4)) {
                org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(
                    org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING,
                    iprot.readI32());
                struct.params = new HashMap<String, String>(2 * _map22.size);
                String _key23;
                String _val24;
                for (int _i25 = 0; _i25 < _map22.size; ++_i25) {
                    _key23 = iprot.readString();
                    _val24 = iprot.readString();
                    struct.params.put(_key23, _val24);
                }
                struct.setParamsIsSet(true);
            }
        }
    }

}
