/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.config.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-22")
public class Config implements org.apache.thrift.TBase<Config, Config._Fields>, java.io.Serializable, Cloneable,
    Comparable<Config> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "Config");

    private static final org.apache.thrift.protocol.TField MODULE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "moduleCode", org.apache.thrift.protocol.TType.STRING, (short) 1);

    private static final org.apache.thrift.protocol.TField CONFIG_ITEM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "configItemCode", org.apache.thrift.protocol.TType.STRING, (short) 2);

    private static final org.apache.thrift.protocol.TField PARAM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "paramCode", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final org.apache.thrift.protocol.TField PARAM_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "paramValue", org.apache.thrift.protocol.TType.STRING, (short) 4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new ConfigStandardSchemeFactory());
        schemes.put(TupleScheme.class, new ConfigTupleSchemeFactory());
    }

    public String moduleCode; // required

    public String configItemCode; // required

    public String paramCode; // required

    public String paramValue; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        MODULE_CODE((short) 1, "moduleCode"), CONFIG_ITEM_CODE((short) 2, "configItemCode"), PARAM_CODE((short) 3,
            "paramCode"), PARAM_VALUE((short) 4, "paramValue");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // MODULE_CODE
                    return MODULE_CODE;
                case 2: // CONFIG_ITEM_CODE
                    return CONFIG_ITEM_CODE;
                case 3: // PARAM_CODE
                    return PARAM_CODE;
                case 4: // PARAM_VALUE
                    return PARAM_VALUE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final _Fields optionals[] = {
        _Fields.PARAM_VALUE
    };

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
            _Fields.class);
        tmpMap.put(_Fields.MODULE_CODE, new org.apache.thrift.meta_data.FieldMetaData("moduleCode",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CONFIG_ITEM_CODE, new org.apache.thrift.meta_data.FieldMetaData("configItemCode",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PARAM_CODE, new org.apache.thrift.meta_data.FieldMetaData("paramCode",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PARAM_VALUE, new org.apache.thrift.meta_data.FieldMetaData("paramValue",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Config.class, metaDataMap);
    }

    public Config() {
    }

    public Config(String moduleCode, String configItemCode, String paramCode) {
        this();
        this.moduleCode = moduleCode;
        this.configItemCode = configItemCode;
        this.paramCode = paramCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Config(Config other) {
        if (other.isSetModuleCode()) {
            this.moduleCode = other.moduleCode;
        }
        if (other.isSetConfigItemCode()) {
            this.configItemCode = other.configItemCode;
        }
        if (other.isSetParamCode()) {
            this.paramCode = other.paramCode;
        }
        if (other.isSetParamValue()) {
            this.paramValue = other.paramValue;
        }
    }

    public Config deepCopy() {
        return new Config(this);
    }

    @Override
    public void clear() {
        this.moduleCode = null;
        this.configItemCode = null;
        this.paramCode = null;
        this.paramValue = null;
    }

    public String getModuleCode() {
        return this.moduleCode;
    }

    public Config setModuleCode(String moduleCode) {
        this.moduleCode = moduleCode;
        return this;
    }

    public void unsetModuleCode() {
        this.moduleCode = null;
    }

    /** Returns true if field moduleCode is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleCode() {
        return this.moduleCode != null;
    }

    public void setModuleCodeIsSet(boolean value) {
        if (!value) {
            this.moduleCode = null;
        }
    }

    public String getConfigItemCode() {
        return this.configItemCode;
    }

    public Config setConfigItemCode(String configItemCode) {
        this.configItemCode = configItemCode;
        return this;
    }

    public void unsetConfigItemCode() {
        this.configItemCode = null;
    }

    /** Returns true if field configItemCode is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigItemCode() {
        return this.configItemCode != null;
    }

    public void setConfigItemCodeIsSet(boolean value) {
        if (!value) {
            this.configItemCode = null;
        }
    }

    public String getParamCode() {
        return this.paramCode;
    }

    public Config setParamCode(String paramCode) {
        this.paramCode = paramCode;
        return this;
    }

    public void unsetParamCode() {
        this.paramCode = null;
    }

    /** Returns true if field paramCode is set (has been assigned a value) and false otherwise */
    public boolean isSetParamCode() {
        return this.paramCode != null;
    }

    public void setParamCodeIsSet(boolean value) {
        if (!value) {
            this.paramCode = null;
        }
    }

    public String getParamValue() {
        return this.paramValue;
    }

    public Config setParamValue(String paramValue) {
        this.paramValue = paramValue;
        return this;
    }

    public void unsetParamValue() {
        this.paramValue = null;
    }

    /** Returns true if field paramValue is set (has been assigned a value) and false otherwise */
    public boolean isSetParamValue() {
        return this.paramValue != null;
    }

    public void setParamValueIsSet(boolean value) {
        if (!value) {
            this.paramValue = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case MODULE_CODE:
                if (value == null) {
                    unsetModuleCode();
                }
                else {
                    setModuleCode((String) value);
                }
                break;

            case CONFIG_ITEM_CODE:
                if (value == null) {
                    unsetConfigItemCode();
                }
                else {
                    setConfigItemCode((String) value);
                }
                break;

            case PARAM_CODE:
                if (value == null) {
                    unsetParamCode();
                }
                else {
                    setParamCode((String) value);
                }
                break;

            case PARAM_VALUE:
                if (value == null) {
                    unsetParamValue();
                }
                else {
                    setParamValue((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case MODULE_CODE:
                return getModuleCode();

            case CONFIG_ITEM_CODE:
                return getConfigItemCode();

            case PARAM_CODE:
                return getParamCode();

            case PARAM_VALUE:
                return getParamValue();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case MODULE_CODE:
                return isSetModuleCode();
            case CONFIG_ITEM_CODE:
                return isSetConfigItemCode();
            case PARAM_CODE:
                return isSetParamCode();
            case PARAM_VALUE:
                return isSetParamValue();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Config)
            return this.equals((Config) that);
        return false;
    }

    public boolean equals(Config that) {
        if (that == null)
            return false;

        boolean this_present_moduleCode = true && this.isSetModuleCode();
        boolean that_present_moduleCode = true && that.isSetModuleCode();
        if (this_present_moduleCode || that_present_moduleCode) {
            if (!(this_present_moduleCode && that_present_moduleCode))
                return false;
            if (!this.moduleCode.equals(that.moduleCode))
                return false;
        }

        boolean this_present_configItemCode = true && this.isSetConfigItemCode();
        boolean that_present_configItemCode = true && that.isSetConfigItemCode();
        if (this_present_configItemCode || that_present_configItemCode) {
            if (!(this_present_configItemCode && that_present_configItemCode))
                return false;
            if (!this.configItemCode.equals(that.configItemCode))
                return false;
        }

        boolean this_present_paramCode = true && this.isSetParamCode();
        boolean that_present_paramCode = true && that.isSetParamCode();
        if (this_present_paramCode || that_present_paramCode) {
            if (!(this_present_paramCode && that_present_paramCode))
                return false;
            if (!this.paramCode.equals(that.paramCode))
                return false;
        }

        boolean this_present_paramValue = true && this.isSetParamValue();
        boolean that_present_paramValue = true && that.isSetParamValue();
        if (this_present_paramValue || that_present_paramValue) {
            if (!(this_present_paramValue && that_present_paramValue))
                return false;
            if (!this.paramValue.equals(that.paramValue))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_moduleCode = true && (isSetModuleCode());
        list.add(present_moduleCode);
        if (present_moduleCode)
            list.add(moduleCode);

        boolean present_configItemCode = true && (isSetConfigItemCode());
        list.add(present_configItemCode);
        if (present_configItemCode)
            list.add(configItemCode);

        boolean present_paramCode = true && (isSetParamCode());
        list.add(present_paramCode);
        if (present_paramCode)
            list.add(paramCode);

        boolean present_paramValue = true && (isSetParamValue());
        list.add(present_paramValue);
        if (present_paramValue)
            list.add(paramValue);

        return list.hashCode();
    }

    @Override
    public int compareTo(Config other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetModuleCode()).compareTo(other.isSetModuleCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetModuleCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleCode, other.moduleCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetConfigItemCode()).compareTo(other.isSetConfigItemCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConfigItemCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configItemCode, other.configItemCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParamCode()).compareTo(other.isSetParamCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParamCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramCode, other.paramCode);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetParamValue()).compareTo(other.isSetParamValue());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetParamValue()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramValue, other.paramValue);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Config(");
        boolean first = true;

        sb.append("moduleCode:");
        if (this.moduleCode == null) {
            sb.append("null");
        }
        else {
            sb.append(this.moduleCode);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("configItemCode:");
        if (this.configItemCode == null) {
            sb.append("null");
        }
        else {
            sb.append(this.configItemCode);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("paramCode:");
        if (this.paramCode == null) {
            sb.append("null");
        }
        else {
            sb.append(this.paramCode);
        }
        first = false;
        if (isSetParamValue()) {
            if (!first)
                sb.append(", ");
            sb.append("paramValue:");
            if (this.paramValue == null) {
                sb.append("null");
            }
            else {
                sb.append(this.paramValue);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (moduleCode == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'moduleCode' was not present! Struct: " + toString());
        }
        if (configItemCode == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'configItemCode' was not present! Struct: " + toString());
        }
        if (paramCode == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'paramCode' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
                out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ConfigStandardSchemeFactory implements SchemeFactory {
        public ConfigStandardScheme getScheme() {
            return new ConfigStandardScheme();
        }
    }

    private static class ConfigStandardScheme extends StandardScheme<Config> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Config struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // MODULE_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.moduleCode = iprot.readString();
                            struct.setModuleCodeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // CONFIG_ITEM_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.configItemCode = iprot.readString();
                            struct.setConfigItemCodeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PARAM_CODE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.paramCode = iprot.readString();
                            struct.setParamCodeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // PARAM_VALUE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.paramValue = iprot.readString();
                            struct.setParamValueIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Config struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.moduleCode != null) {
                oprot.writeFieldBegin(MODULE_CODE_FIELD_DESC);
                oprot.writeString(struct.moduleCode);
                oprot.writeFieldEnd();
            }
            if (struct.configItemCode != null) {
                oprot.writeFieldBegin(CONFIG_ITEM_CODE_FIELD_DESC);
                oprot.writeString(struct.configItemCode);
                oprot.writeFieldEnd();
            }
            if (struct.paramCode != null) {
                oprot.writeFieldBegin(PARAM_CODE_FIELD_DESC);
                oprot.writeString(struct.paramCode);
                oprot.writeFieldEnd();
            }
            if (struct.paramValue != null) {
                if (struct.isSetParamValue()) {
                    oprot.writeFieldBegin(PARAM_VALUE_FIELD_DESC);
                    oprot.writeString(struct.paramValue);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ConfigTupleSchemeFactory implements SchemeFactory {
        public ConfigTupleScheme getScheme() {
            return new ConfigTupleScheme();
        }
    }

    private static class ConfigTupleScheme extends TupleScheme<Config> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Config struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.moduleCode);
            oprot.writeString(struct.configItemCode);
            oprot.writeString(struct.paramCode);
            BitSet optionals = new BitSet();
            if (struct.isSetParamValue()) {
                optionals.set(0);
            }
            oprot.writeBitSet(optionals, 1);
            if (struct.isSetParamValue()) {
                oprot.writeString(struct.paramValue);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Config struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.moduleCode = iprot.readString();
            struct.setModuleCodeIsSet(true);
            struct.configItemCode = iprot.readString();
            struct.setConfigItemCodeIsSet(true);
            struct.paramCode = iprot.readString();
            struct.setParamCodeIsSet(true);
            BitSet incoming = iprot.readBitSet(1);
            if (incoming.get(0)) {
                struct.paramValue = iprot.readString();
                struct.setParamValueIsSet(true);
            }
        }
    }

}
