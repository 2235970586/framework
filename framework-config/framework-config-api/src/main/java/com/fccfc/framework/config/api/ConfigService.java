/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.config.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 * <Description> <br> 
 *  
 * @author yang.zhipeng <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年6月30日 <br>
 * @since V7.3<br>
 * @see com.fccfc.framework.config.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-22")
public class ConfigService {

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public interface Iface {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public List<Config> queryAllConfig(String moduleCode) throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param configItemCode <br>
         * @param paramCode <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public String queryConfig(String moduleCode, String configItemCode, String paramCode)
            throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void updateConfig(Config config) throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void addConfig(Config config) throws org.apache.thrift.TException;

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public interface AsyncIface {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void queryAllConfig(String moduleCode, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param configItemCode <br>
         * @param paramCode <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void queryConfig(String moduleCode, String configItemCode, String paramCode,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void updateConfig(Config config, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void addConfig(Config config, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        
        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            
            /**
             * Factory
             */
            public Factory() {
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @return <br>
             */
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param oprot <br>
             * @return <br>
             */
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        /**
         * Client
         * @param prot <br>
         */
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        /**
         * Client
         * @param iprot <br>
         * @param oprot <br>
         */
        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public List<Config> queryAllConfig(String moduleCode) throws org.apache.thrift.TException {
            send_queryAllConfig(moduleCode);
            return recv_queryAllConfig();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void send_queryAllConfig(String moduleCode) throws org.apache.thrift.TException {
            queryAllConfig_args args = new queryAllConfig_args();
            args.setModuleCode(moduleCode);
            sendBase("queryAllConfig", args);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public List<Config> recv_queryAllConfig() throws org.apache.thrift.TException {
            queryAllConfig_result result = new queryAllConfig_result();
            receiveBase(result, "queryAllConfig");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "queryAllConfig failed: unknown result");
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param configItemCode <br>
         * @param paramCode <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public String queryConfig(String moduleCode, String configItemCode, String paramCode)
            throws org.apache.thrift.TException {
            send_queryConfig(moduleCode, configItemCode, paramCode);
            return recv_queryConfig();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param configItemCode <br>
         * @param paramCode <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void send_queryConfig(String moduleCode, String configItemCode, String paramCode)
            throws org.apache.thrift.TException {
            queryConfig_args args = new queryConfig_args();
            args.setModuleCode(moduleCode);
            args.setConfigItemCode(configItemCode);
            args.setParamCode(paramCode);
            sendBase("queryConfig", args);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         * @throws org.apache.thrift.TException <br>
         */
        public String recv_queryConfig() throws org.apache.thrift.TException {
            queryConfig_result result = new queryConfig_result();
            receiveBase(result, "queryConfig");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
                "queryConfig failed: unknown result");
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void updateConfig(Config config) throws org.apache.thrift.TException {
            send_updateConfig(config);
            recv_updateConfig();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void send_updateConfig(Config config) throws org.apache.thrift.TException {
            updateConfig_args args = new updateConfig_args();
            args.setConfig(config);
            sendBase("updateConfig", args);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recv_updateConfig() throws org.apache.thrift.TException {
            updateConfig_result result = new updateConfig_result();
            receiveBase(result, "updateConfig");
            return;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void addConfig(Config config) throws org.apache.thrift.TException {
            send_addConfig(config);
            recv_addConfig();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void send_addConfig(Config config) throws org.apache.thrift.TException {
            addConfig_args args = new addConfig_args();
            args.setConfig(config);
            sendBase("addConfig", args);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recv_addConfig() throws org.apache.thrift.TException {
            addConfig_result result = new addConfig_result();
            receiveBase(result, "addConfig");
            return;
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        
        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            
            /**
             * clientManager
             */
            private org.apache.thrift.async.TAsyncClientManager clientManager;

            /**
             * protocolFactory
             */
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            /**
             * Factory
             * @param clientManager <br>
             * @param protocolFactory <br>
             */
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param transport <br>
             * @return <br>
             */
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        /**
         * AsyncClient
         * @param protocolFactory <br>
         * @param clientManager <br>
         * @param transport <br>
         */
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
            org.apache.thrift.async.TAsyncClientManager clientManager,
            org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void queryAllConfig(String moduleCode, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            queryAllConfig_call method_call = new queryAllConfig_call(moduleCode, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class queryAllConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
            
            /**
             * moduleCode
             */
            private String moduleCode;

            /**
             * queryAllConfig_call
             * @param moduleCode <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public queryAllConfig_call(String moduleCode, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.moduleCode = moduleCode;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllConfig",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryAllConfig_args args = new queryAllConfig_args();
                args.setModuleCode(moduleCode);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public List<Config> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryAllConfig();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @param configItemCode <br>
         * @param paramCode <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void queryConfig(String moduleCode, String configItemCode, String paramCode,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            queryConfig_call method_call = new queryConfig_call(moduleCode, configItemCode, paramCode, resultHandler,
                this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class queryConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
            
            /**
             * moduleCode
             */
            private String moduleCode;

            /**
             * configItemCode
             */
            private String configItemCode;

            /**
             * paramCode
             */
            private String paramCode;

            /**
             * queryConfig_call
             * @param moduleCode <br>
             * @param configItemCode <br>
             * @param paramCode <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public queryConfig_call(String moduleCode, String configItemCode, String paramCode,
                org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.moduleCode = moduleCode;
                this.configItemCode = configItemCode;
                this.paramCode = paramCode;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryConfig",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                queryConfig_args args = new queryConfig_args();
                args.setModuleCode(moduleCode);
                args.setConfigItemCode(configItemCode);
                args.setParamCode(paramCode);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public String getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_queryConfig();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void updateConfig(Config config, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            updateConfig_call method_call = new updateConfig_call(config, resultHandler, this, ___protocolFactory,
                ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class updateConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
            
            /**
             * config
             */
            private Config config;

            /**
             * updateConfig_call
             * @param config <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public updateConfig_call(Config config, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.config = config;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateConfig",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                updateConfig_args args = new updateConfig_args();
                args.setConfig(config);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_updateConfig();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void addConfig(Config config, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            addConfig_call method_call = new addConfig_call(config, resultHandler, this, ___protocolFactory,
                ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class addConfig_call extends org.apache.thrift.async.TAsyncMethodCall {
            
            /**
             * config
             */
            private Config config;

            /**
             * addConfig_call
             * @param config <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public addConfig_call(Config config, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.config = config;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addConfig",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                addConfig_args args = new addConfig_args();
                args.setConfig(config);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_addConfig();
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements
        org.apache.thrift.TProcessor {
        
        /**
         * LOGGER
         */
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        /**
         * Processor
         * @param iface <br>
         */
        public Processor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        /**
         * Processor
         * @param iface <br>
         * @param processMap <br>
         */
        protected Processor(I iface,
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param <I> <br>
         * @param processMap <br>
         * @return <br>
         */
        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("queryAllConfig", new queryAllConfig());
            processMap.put("queryConfig", new queryConfig());
            processMap.put("updateConfig", new updateConfig());
            processMap.put("addConfig", new addConfig());
            return processMap;
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class queryAllConfig<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, queryAllConfig_args> {
            
            /**
             * queryAllConfig
             */
            public queryAllConfig() {
                super("queryAllConfig");
            }

            public queryAllConfig_args getEmptyArgsInstance() {
                return new queryAllConfig_args();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public queryAllConfig_result getResult(I iface, queryAllConfig_args args)
                throws org.apache.thrift.TException {
                queryAllConfig_result result = new queryAllConfig_result();
                result.success = iface.queryAllConfig(args.moduleCode);
                return result;
            }
        }

            /**
             * 
             * <Description> <br> 
             *  
             * @author yang.zhipeng <br>
             * @version 1.0<br>
             * @taskId <br>
             * @CreateDate 2015年6月30日 <br>
             * @since V7.3<br>
             * @see com.fccfc.framework.config.api <br>
             */
        public static class queryConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryConfig_args> {
            
            /**
             * queryConfig
             */
            public queryConfig() {
                super("queryConfig");
            }

            public queryConfig_args getEmptyArgsInstance() {
                return new queryConfig_args();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public queryConfig_result getResult(I iface, queryConfig_args args) throws org.apache.thrift.TException {
                queryConfig_result result = new queryConfig_result();
                result.success = iface.queryConfig(args.moduleCode, args.configItemCode, args.paramCode);
                return result;
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class updateConfig<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, updateConfig_args> {
                
            /**
             * updateConfig
             */
            public updateConfig() {
                super("updateConfig");
            }

            public updateConfig_args getEmptyArgsInstance() {
                return new updateConfig_args();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public updateConfig_result getResult(I iface, updateConfig_args args) throws org.apache.thrift.TException {
                updateConfig_result result = new updateConfig_result();
                iface.updateConfig(args.config);
                return result;
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class addConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addConfig_args> {
            
            /**
             * addConfig
             */
            public addConfig() {
                super("addConfig");
            }

            public addConfig_args getEmptyArgsInstance() {
                return new addConfig_args();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public addConfig_result getResult(I iface, addConfig_args args) throws org.apache.thrift.TException {
                addConfig_result result = new addConfig_result();
                iface.addConfig(args.config);
                return result;
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        
        /**
         * LOGGER
         */
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        /**
         * AsyncProcessor
         * @param iface <br>
         */
        public AsyncProcessor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        /**
         * AsyncProcessor
         * @param iface <br>
         * @param processMap <br>
         */
        protected AsyncProcessor(I iface,
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param <I> <br>
         * @param processMap <br>
         * @return <br>
         */
        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction
                                                            <I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("queryAllConfig", new queryAllConfig());
            processMap.put("queryConfig", new queryConfig());
            processMap.put("updateConfig", new updateConfig());
            processMap.put("addConfig", new addConfig());
            return processMap;
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class queryAllConfig<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, queryAllConfig_args, List<Config>> {
            
            /**
             * queryAllConfig
             */
            public queryAllConfig() {
                super("queryAllConfig");
            }

            public queryAllConfig_args getEmptyArgsInstance() {
                return new queryAllConfig_args();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<List<Config>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Config>>() {
                    public void onComplete(List<Config> o) {
                        queryAllConfig_result result = new queryAllConfig_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        queryAllConfig_result result = new queryAllConfig_result();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, queryAllConfig_args args,
                org.apache.thrift.async.AsyncMethodCallback<List<Config>> resultHandler) throws TException {
                iface.queryAllConfig(args.moduleCode, resultHandler);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class queryConfig<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, queryConfig_args, String> {
            
            /**
             * queryConfig
             */
            public queryConfig() {
                super("queryConfig");
            }

            public queryConfig_args getEmptyArgsInstance() {
                return new queryConfig_args();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>() {
                    public void onComplete(String o) {
                        queryConfig_result result = new queryConfig_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        queryConfig_result result = new queryConfig_result();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, queryConfig_args args,
                org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
                iface.queryConfig(args.moduleCode, args.configItemCode, args.paramCode, resultHandler);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class updateConfig<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, updateConfig_args, Void> {
            
            /**
             * updateConfig
             */
            public updateConfig() {
                super("updateConfig");
            }

            public updateConfig_args getEmptyArgsInstance() {
                return new updateConfig_args();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        updateConfig_result result = new updateConfig_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        updateConfig_result result = new updateConfig_result();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, updateConfig_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.updateConfig(args.config, resultHandler);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        public static class addConfig<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, addConfig_args, Void> {
            
            /**
             * addConfig
             */
            public addConfig() {
                super("addConfig");
            }

            public addConfig_args getEmptyArgsInstance() {
                return new addConfig_args();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        addConfig_result result = new addConfig_result();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        addConfig_result result = new addConfig_result();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, addConfig_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.addConfig(args.config, resultHandler);
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class queryAllConfig_args implements
        org.apache.thrift.TBase<queryAllConfig_args, queryAllConfig_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<queryAllConfig_args> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "queryAllConfig_args");

        /**
         * MODULE_CODE_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField MODULE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "moduleCode", org.apache.thrift.protocol.TType.STRING, (short) 1);

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new queryAllConfig_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new queryAllConfig_argsTupleSchemeFactory());
        }

        /**
         * moduleCode
         */
        public String moduleCode; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * MODULE_CODE
             */
            MODULE_CODE((short) 1, "moduleCode");

            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MODULE_CODE
                        return MODULE_CODE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (null == fields) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.MODULE_CODE, new org.apache.thrift.meta_data.FieldMetaData("moduleCode",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllConfig_args.class, metaDataMap);
        }

        /**
         * queryAllConfig_args
         */
        public queryAllConfig_args() {
        }

        /**
         * queryAllConfig_args
         * @param moduleCode <br>
         */
        public queryAllConfig_args(String moduleCode) {
            this();
            this.moduleCode = moduleCode;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         * @return <br>
         */
        public queryAllConfig_args(queryAllConfig_args other) {
            if (other.isSetModuleCode()) {
                this.moduleCode = other.moduleCode;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public queryAllConfig_args deepCopy() {
            return new queryAllConfig_args(this);
        }

        @Override
        public void clear() {
            this.moduleCode = null;
        }

        public String getModuleCode() {
            return this.moduleCode;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @return <br>
         */
        public queryAllConfig_args setModuleCode(String moduleCode) {
            this.moduleCode = moduleCode;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetModuleCode() {
            this.moduleCode = null;
        }

        /** Returns true if field moduleCode is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetModuleCode() {
            return this.moduleCode != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setModuleCodeIsSet(boolean value) {
            if (!value) {
                this.moduleCode = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MODULE_CODE:
                    if (value == null) {
                        unsetModuleCode();
                    }
                    else {
                        setModuleCode((String) value);
                    }
                    break;

            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MODULE_CODE:
                    return getModuleCode();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MODULE_CODE:
                    return isSetModuleCode();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (null == that) {
                return false;
            }
            if (that instanceof queryAllConfig_args) {
                return this.equals((queryAllConfig_args) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(queryAllConfig_args that) {
            if (null == that) {
                return false;
            }

            boolean this_present_moduleCode = true & this.isSetModuleCode();
            boolean that_present_moduleCode = true & that.isSetModuleCode();
            if (this_present_moduleCode || that_present_moduleCode) {
                if (!(this_present_moduleCode && that_present_moduleCode)) {
                    return false;
                }
                if (!this.moduleCode.equals(that.moduleCode)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_moduleCode = true & (isSetModuleCode());
            list.add(present_moduleCode);
            if (present_moduleCode) {
                list.add(moduleCode);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(queryAllConfig_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetModuleCode()).compareTo(other.isSetModuleCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetModuleCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleCode, other.moduleCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllConfig_args(");
            boolean first = true;

            sb.append("moduleCode:");
            if (this.moduleCode == null) {
                sb.append("null");
            }
            else {
                sb.append(this.moduleCode);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_argsStandardSchemeFactory implements SchemeFactory {
            public queryAllConfig_argsStandardScheme getScheme() {
                return new queryAllConfig_argsStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_argsStandardScheme extends StandardScheme<queryAllConfig_args> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllConfig_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MODULE_CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.moduleCode = iprot.readString();
                                struct.setModuleCodeIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllConfig_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.moduleCode != null) {
                    oprot.writeFieldBegin(MODULE_CODE_FIELD_DESC);
                    oprot.writeString(struct.moduleCode);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_argsTupleSchemeFactory implements SchemeFactory {
            public queryAllConfig_argsTupleScheme getScheme() {
                return new queryAllConfig_argsTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_argsTupleScheme extends TupleScheme<queryAllConfig_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetModuleCode()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetModuleCode()) {
                    oprot.writeString(struct.moduleCode);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.moduleCode = iprot.readString();
                    struct.setModuleCodeIsSet(true);
                }
            }
        }

    }
    
    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class queryAllConfig_result implements
        org.apache.thrift.TBase<queryAllConfig_result, queryAllConfig_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<queryAllConfig_result> {
        
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "queryAllConfig_result");

        /**
         * SUCCESS_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.LIST, (short) 0);

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new queryAllConfig_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new queryAllConfig_resultTupleSchemeFactory());
        }

        /**
         * success
         */
        public List<Config> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * SUCCESS
             */
            SUCCESS((short) 0, "success");

            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(
                    org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, Config.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllConfig_result.class, metaDataMap);
        }

        /**
         * queryAllConfig_result
         */
        public queryAllConfig_result() {
        }

        /**
         * queryAllConfig_result
         * @param success <br>
         */
        public queryAllConfig_result(List<Config> success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public queryAllConfig_result(queryAllConfig_result other) {
            if (other.isSetSuccess()) {
                List<Config> __this__success = new ArrayList<Config>(other.success.size());
                for (Config other_element : other.success) {
                    __this__success.add(new Config(other_element));
                }
                this.success = __this__success;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public queryAllConfig_result deepCopy() {
            return new queryAllConfig_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Config> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param elem <br>
         */
        public void addToSuccess(Config elem) {
            if (this.success == null) {
                this.success = new ArrayList<Config>();
            }
            this.success.add(elem);
        }

        public List<Config> getSuccess() {
            return this.success;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param success <br>
         * @return <br>
         */
        public queryAllConfig_result setSuccess(List<Config> success) {
            this.success = success;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    }
                    else {
                        setSuccess((List<Config>) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof queryAllConfig_result) {
                return this.equals((queryAllConfig_result) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(queryAllConfig_result that) {
            if (that == null) {
                return false;
            }

            boolean this_present_success = true & this.isSetSuccess();
            boolean that_present_success = true & that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true & (isSetSuccess());
            list.add(present_success);
            if (present_success) {
                list.add(success);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(queryAllConfig_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryAllConfig_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            }
            else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_resultStandardSchemeFactory implements SchemeFactory {
            public queryAllConfig_resultStandardScheme getScheme() {
                return new queryAllConfig_resultStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_resultStandardScheme extends StandardScheme<queryAllConfig_result> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllConfig_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                struct.success = new ArrayList<Config>(_list0.size);
                                Config _elem1;
                                for (int _i2 = 0; _i2 < _list0.size; ++_i2) {
                                    _elem1 = new Config();
                                    _elem1.read(iprot);
                                    struct.success.add(_elem1);
                                }
                                iprot.readListEnd();
                                struct.setSuccessIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllConfig_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                        org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                    for (Config _iter3 : struct.success) {
                        _iter3.write(oprot);
                    }
                    oprot.writeListEnd();
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_resultTupleSchemeFactory implements SchemeFactory {
            public queryAllConfig_resultTupleScheme getScheme() {
                return new queryAllConfig_resultTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryAllConfig_resultTupleScheme extends TupleScheme<queryAllConfig_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryAllConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeI32(struct.success.size());
                    for (Config _iter4 : struct.success) {
                        _iter4.write(oprot);
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryAllConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
                        org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                    struct.success = new ArrayList<Config>(_list5.size);
                    Config _elem6;
                    for (int _i7 = 0; _i7 < _list5.size; ++_i7) {
                        _elem6 = new Config();
                        _elem6.read(iprot);
                        struct.success.add(_elem6);
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    
    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class queryConfig_args implements
        org.apache.thrift.TBase<queryConfig_args, queryConfig_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<queryConfig_args> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "queryConfig_args");

        /**
         * MODULE_CODE_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField MODULE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "moduleCode", org.apache.thrift.protocol.TType.STRING, (short) 1);

        /**
         * CONFIG_ITEM_CODE_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField CONFIG_ITEM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "configItemCode", org.apache.thrift.protocol.TType.STRING, (short) 2);

        /**
         * PARAM_CODE_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField PARAM_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "paramCode", org.apache.thrift.protocol.TType.STRING, (short) 3);

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new queryConfig_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new queryConfig_argsTupleSchemeFactory());
        }

        /**
         * moduleCode
         */
        public String moduleCode; // required

        /**
         * configItemCode
         */
        public String configItemCode; // required

        /**
         * paramCode
         */
        public String paramCode; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * MODULE_CODE
             */
            MODULE_CODE((short) 1, "moduleCode"), CONFIG_ITEM_CODE((short) 2, "configItemCode"), PARAM_CODE((short) 3,
                "paramCode");

            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // MODULE_CODE
                        return MODULE_CODE;
                    case 2: // CONFIG_ITEM_CODE
                        return CONFIG_ITEM_CODE;
                    case 3: // PARAM_CODE
                        return PARAM_CODE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         *  isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.MODULE_CODE, new org.apache.thrift.meta_data.FieldMetaData("moduleCode",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CONFIG_ITEM_CODE, new org.apache.thrift.meta_data.FieldMetaData("configItemCode",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PARAM_CODE, new org.apache.thrift.meta_data.FieldMetaData("paramCode",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryConfig_args.class, metaDataMap);
        }

        /**
         * queryConfig_args
         */
        public queryConfig_args() {
        }

        /**
         * queryConfig_args
         * @param moduleCode <br>
         * @param configItemCode <br>
         * @param paramCode <br>
         */
        public queryConfig_args(String moduleCode, String configItemCode, String paramCode) {
            this();
            this.moduleCode = moduleCode;
            this.configItemCode = configItemCode;
            this.paramCode = paramCode;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         * @return;
         */
        public queryConfig_args(queryConfig_args other) {
            if (other.isSetModuleCode()) {
                this.moduleCode = other.moduleCode;
            }
            if (other.isSetConfigItemCode()) {
                this.configItemCode = other.configItemCode;
            }
            if (other.isSetParamCode()) {
                this.paramCode = other.paramCode;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public queryConfig_args deepCopy() {
            return new queryConfig_args(this);
        }

        @Override
        public void clear() {
            this.moduleCode = null;
            this.configItemCode = null;
            this.paramCode = null;
        }

        public String getModuleCode() {
            return this.moduleCode;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param moduleCode <br>
         * @return <br>
         */
        public queryConfig_args setModuleCode(String moduleCode) {
            this.moduleCode = moduleCode;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetModuleCode() {
            this.moduleCode = null;
        }

        /** Returns true if field moduleCode is set (has been assigned a value) and false otherwise 
         * @return <br>
         * */
        public boolean isSetModuleCode() {
            return this.moduleCode != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setModuleCodeIsSet(boolean value) {
            if (!value) {
                this.moduleCode = null;
            }
        }

        public String getConfigItemCode() {
            return this.configItemCode;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param configItemCode <br>
         * @return <br>
         */
        public queryConfig_args setConfigItemCode(String configItemCode) {
            this.configItemCode = configItemCode;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetConfigItemCode() {
            this.configItemCode = null;
        }

        /** Returns true if field configItemCode is set (has been assigned a value) and false otherwise 
         * @return <br>
         * */
        public boolean isSetConfigItemCode() {
            return this.configItemCode != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setConfigItemCodeIsSet(boolean value) {
            if (!value) {
                this.configItemCode = null;
            }
        }

        public String getParamCode() {
            return this.paramCode;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param paramCode <br>
         * @return <br>
         */
        public queryConfig_args setParamCode(String paramCode) {
            this.paramCode = paramCode;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetParamCode() {
            this.paramCode = null;
        }

        /** Returns true if field paramCode is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetParamCode() {
            return this.paramCode != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setParamCodeIsSet(boolean value) {
            if (!value) {
                this.paramCode = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MODULE_CODE:
                    if (value == null) {
                        unsetModuleCode();
                    }
                    else {
                        setModuleCode((String) value);
                    }
                    break;

                case CONFIG_ITEM_CODE:
                    if (value == null) {
                        unsetConfigItemCode();
                    }
                    else {
                        setConfigItemCode((String) value);
                    }
                    break;

                case PARAM_CODE:
                    if (value == null) {
                        unsetParamCode();
                    }
                    else {
                        setParamCode((String) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MODULE_CODE:
                    return getModuleCode();

                case CONFIG_ITEM_CODE:
                    return getConfigItemCode();

                case PARAM_CODE:
                    return getParamCode();
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise 
         * @param field <br>
         * @return <br>
         * */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MODULE_CODE:
                    return isSetModuleCode();
                case CONFIG_ITEM_CODE:
                    return isSetConfigItemCode();
                case PARAM_CODE:
                    return isSetParamCode();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof queryConfig_args) {
                return this.equals((queryConfig_args) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(queryConfig_args that) {
            if (that == null) {
                return false;
            }

            boolean this_present_moduleCode = true & this.isSetModuleCode();
            boolean that_present_moduleCode = true & that.isSetModuleCode();
            if (this_present_moduleCode || that_present_moduleCode) {
                if (!(this_present_moduleCode && that_present_moduleCode)) {
                    return false;
                }
                if (!this.moduleCode.equals(that.moduleCode)) {
                    return false;
                }
            }

            boolean this_present_configItemCode = true & this.isSetConfigItemCode();
            boolean that_present_configItemCode = true & that.isSetConfigItemCode();
            if (this_present_configItemCode || that_present_configItemCode) {
                if (!(this_present_configItemCode && that_present_configItemCode)) {
                    return false;
                }
                if (!this.configItemCode.equals(that.configItemCode)) {
                    return false;
                }
            }

            boolean this_present_paramCode = true & this.isSetParamCode();
            boolean that_present_paramCode = true & that.isSetParamCode();
            if (this_present_paramCode || that_present_paramCode) {
                if (!(this_present_paramCode && that_present_paramCode)) {
                    return false;
                }
                if (!this.paramCode.equals(that.paramCode)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_moduleCode = true & (isSetModuleCode());
            list.add(present_moduleCode);
            if (present_moduleCode) {
                list.add(moduleCode);
            }

            boolean present_configItemCode = true & (isSetConfigItemCode());
            list.add(present_configItemCode);
            if (present_configItemCode) {
                list.add(configItemCode);
            }

            boolean present_paramCode = true & (isSetParamCode());
            list.add(present_paramCode);
            if (present_paramCode) {
                list.add(paramCode);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(queryConfig_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetModuleCode()).compareTo(other.isSetModuleCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetModuleCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleCode, other.moduleCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetConfigItemCode()).compareTo(other.isSetConfigItemCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetConfigItemCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configItemCode, other.configItemCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetParamCode()).compareTo(other.isSetParamCode());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetParamCode()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paramCode, other.paramCode);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryConfig_args(");
            boolean first = true;

            sb.append("moduleCode:");
            if (this.moduleCode == null) {
                sb.append("null");
            }
            else {
                sb.append(this.moduleCode);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("configItemCode:");
            if (this.configItemCode == null) {
                sb.append("null");
            }
            else {
                sb.append(this.configItemCode);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("paramCode:");
            if (this.paramCode == null) {
                sb.append("null");
            }
            else {
                sb.append(this.paramCode);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_argsStandardSchemeFactory implements SchemeFactory {
            public queryConfig_argsStandardScheme getScheme() {
                return new queryConfig_argsStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_argsStandardScheme extends StandardScheme<queryConfig_args> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, queryConfig_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MODULE_CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.moduleCode = iprot.readString();
                                struct.setModuleCodeIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CONFIG_ITEM_CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.configItemCode = iprot.readString();
                                struct.setConfigItemCodeIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PARAM_CODE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.paramCode = iprot.readString();
                                struct.setParamCodeIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, queryConfig_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.moduleCode != null) {
                    oprot.writeFieldBegin(MODULE_CODE_FIELD_DESC);
                    oprot.writeString(struct.moduleCode);
                    oprot.writeFieldEnd();
                }
                if (struct.configItemCode != null) {
                    oprot.writeFieldBegin(CONFIG_ITEM_CODE_FIELD_DESC);
                    oprot.writeString(struct.configItemCode);
                    oprot.writeFieldEnd();
                }
                if (struct.paramCode != null) {
                    oprot.writeFieldBegin(PARAM_CODE_FIELD_DESC);
                    oprot.writeString(struct.paramCode);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_argsTupleSchemeFactory implements SchemeFactory {
            public queryConfig_argsTupleScheme getScheme() {
                return new queryConfig_argsTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_argsTupleScheme extends TupleScheme<queryConfig_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetModuleCode()) {
                    optionals.set(0);
                }
                if (struct.isSetConfigItemCode()) {
                    optionals.set(1);
                }
                if (struct.isSetParamCode()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetModuleCode()) {
                    oprot.writeString(struct.moduleCode);
                }
                if (struct.isSetConfigItemCode()) {
                    oprot.writeString(struct.configItemCode);
                }
                if (struct.isSetParamCode()) {
                    oprot.writeString(struct.paramCode);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.moduleCode = iprot.readString();
                    struct.setModuleCodeIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.configItemCode = iprot.readString();
                    struct.setConfigItemCodeIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.paramCode = iprot.readString();
                    struct.setParamCodeIsSet(true);
                }
            }
        }

    }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
    public static class queryConfig_result implements
        org.apache.thrift.TBase<queryConfig_result, queryConfig_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<queryConfig_result> {
        
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "queryConfig_result");

        /**
         * SUCCESS_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "success", org.apache.thrift.protocol.TType.STRING, (short) 0);

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new queryConfig_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new queryConfig_resultTupleSchemeFactory());
        }

        /**
         * success
         */
        public String success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * SUCCESS
             */
            SUCCESS((short) 0, "success");

            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryConfig_result.class, metaDataMap);
        }

        /**
         * queryConfig_result
         */
        public queryConfig_result() {
        }

        /**
         * queryConfig_result
         * @param success <br>
         */
        public queryConfig_result(String success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public queryConfig_result(queryConfig_result other) {
            if (other.isSetSuccess()) {
                this.success = other.success;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public queryConfig_result deepCopy() {
            return new queryConfig_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public String getSuccess() {
            return this.success;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param success <br>
         * @return <br>
         */
        public queryConfig_result setSuccess(String success) {
            this.success = success;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    }
                    else {
                        setSuccess((String) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof queryConfig_result) {
                return this.equals((queryConfig_result) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(queryConfig_result that) {
            if (that == null) {
                return false;
            }

            boolean this_present_success = true & this.isSetSuccess();
            boolean that_present_success = true & that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success)) {
                    return false;
                }
                if (!this.success.equals(that.success)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true & (isSetSuccess());
            list.add(present_success);
            if (present_success) {
                list.add(success);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(queryConfig_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("queryConfig_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            }
            else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_resultStandardSchemeFactory implements SchemeFactory {
            public queryConfig_resultStandardScheme getScheme() {
                return new queryConfig_resultStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_resultStandardScheme extends StandardScheme<queryConfig_result> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, queryConfig_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, queryConfig_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_resultTupleSchemeFactory implements SchemeFactory {
            public queryConfig_resultTupleScheme getScheme() {
                return new queryConfig_resultTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class queryConfig_resultTupleScheme extends TupleScheme<queryConfig_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, queryConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeString(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, queryConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class updateConfig_args implements
        org.apache.thrift.TBase<updateConfig_args, updateConfig_args._Fields>, java.io.Serializable, Cloneable,
        Comparable<updateConfig_args> {
        
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "updateConfig_args");

        /**
         * CONFIG_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "config", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateConfig_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateConfig_argsTupleSchemeFactory());
        }

        /**
         * config
         */
        public Config config; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * CONFIG
             */
            CONFIG((short) 1, "config");

            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CONFIG
                        return CONFIG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         *  isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Config.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateConfig_args.class, metaDataMap);
        }

        /**
         * updateConfig_args
         */
        public updateConfig_args() {
        }

        /**
         * updateConfig_args
         * @param config <br>
         */
        public updateConfig_args(Config config) {
            this();
            this.config = config;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public updateConfig_args(updateConfig_args other) {
            if (other.isSetConfig()) {
                this.config = new Config(other.config);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public updateConfig_args deepCopy() {
            return new updateConfig_args(this);
        }

        @Override
        public void clear() {
            this.config = null;
        }

        public Config getConfig() {
            return this.config;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @return <br>
         */
        public updateConfig_args setConfig(Config config) {
            this.config = config;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetConfig() {
            this.config = null;
        }

        /** Returns true if field config is set (has been assigned a value) and false otherwise
         * @return <br>
         *  */
        public boolean isSetConfig() {
            return this.config != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setConfigIsSet(boolean value) {
            if (!value) {
                this.config = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CONFIG:
                    if (value == null) {
                        unsetConfig();
                    }
                    else {
                        setConfig((Config) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CONFIG:
                    return getConfig();
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CONFIG:
                    return isSetConfig();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof updateConfig_args) {
                return this.equals((updateConfig_args) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(updateConfig_args that) {
            if (that == null) {
                return false;
            }

            boolean this_present_config = true & this.isSetConfig();
            boolean that_present_config = true & that.isSetConfig();
            if (this_present_config || that_present_config) {
                if (!(this_present_config && that_present_config)) {
                    return false;
                }
                if (!this.config.equals(that.config)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_config = true & (isSetConfig());
            list.add(present_config);
            if (present_config) {
                list.add(config);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(updateConfig_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetConfig()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateConfig_args(");
            boolean first = true;

            sb.append("config:");
            if (this.config == null) {
                sb.append("null");
            }
            else {
                sb.append(this.config);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (config != null) {
                config.validate();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_argsStandardSchemeFactory implements SchemeFactory {
            public updateConfig_argsStandardScheme getScheme() {
                return new updateConfig_argsStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_argsStandardScheme extends StandardScheme<updateConfig_args> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, updateConfig_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CONFIG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.config = new Config();
                                struct.config.read(iprot);
                                struct.setConfigIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, updateConfig_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.config != null) {
                    oprot.writeFieldBegin(CONFIG_FIELD_DESC);
                    struct.config.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_argsTupleSchemeFactory implements SchemeFactory {
            public updateConfig_argsTupleScheme getScheme() {
                return new updateConfig_argsTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_argsTupleScheme extends TupleScheme<updateConfig_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetConfig()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetConfig()) {
                    struct.config.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.config = new Config();
                    struct.config.read(iprot);
                    struct.setConfigIsSet(true);
                }
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class updateConfig_result implements
        org.apache.thrift.TBase<updateConfig_result, updateConfig_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<updateConfig_result> {
            
       /**
        * STRUCT_DESC
        */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "updateConfig_result");

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new updateConfig_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new updateConfig_resultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;
            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         * metaDataMap
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateConfig_result.class, metaDataMap);
        }

        /**
         * updateConfig_result
         */
        public updateConfig_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public updateConfig_result(updateConfig_result other) {
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public updateConfig_result deepCopy() {
            return new updateConfig_result(this);
        }

        @Override
        public void clear() {
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise 
         * @param field <br>
         * @return  <br>
         * */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof updateConfig_result) {
                return this.equals((updateConfig_result) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(updateConfig_result that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(updateConfig_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("updateConfig_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_resultStandardSchemeFactory implements SchemeFactory {
            public updateConfig_resultStandardScheme getScheme() {
                return new updateConfig_resultStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_resultStandardScheme extends StandardScheme<updateConfig_result> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, updateConfig_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, updateConfig_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_resultTupleSchemeFactory implements SchemeFactory {
            public updateConfig_resultTupleScheme getScheme() {
                return new updateConfig_resultTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class updateConfig_resultTupleScheme extends TupleScheme<updateConfig_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, updateConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, updateConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class addConfig_args implements org.apache.thrift.TBase<addConfig_args, addConfig_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<addConfig_args> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "addConfig_args");

        /**
         * CONFIG_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "config", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new addConfig_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addConfig_argsTupleSchemeFactory());
        }

        /**
         * config
         */
        public Config config; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            
            /**
             * CONFIG
             */
            CONFIG((short) 1, "config");

            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // CONFIG
                        return CONFIG;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Config.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addConfig_args.class, metaDataMap);
        }

        /**
         * addConfig_args
         */
        public addConfig_args() {
        }

        /**
         * addConfig_args
         * @param config <br>
         */
        public addConfig_args(Config config) {
            this();
            this.config = config;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public addConfig_args(addConfig_args other) {
            if (other.isSetConfig()) {
                this.config = new Config(other.config);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public addConfig_args deepCopy() {
            return new addConfig_args(this);
        }

        @Override
        public void clear() {
            this.config = null;
        }

        public Config getConfig() {
            return this.config;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param config <br>
         * @return <br>
         */
        public addConfig_args setConfig(Config config) {
            this.config = config;
            return this;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br> <br>
         */
        public void unsetConfig() {
            this.config = null;
        }

        /** Returns true if field config is set (has been assigned a value) and false otherwise 
         * @return <br>
         * */
        public boolean isSetConfig() {
            return this.config != null;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setConfigIsSet(boolean value) {
            if (!value) {
                this.config = null;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case CONFIG:
                    if (value == null) {
                        unsetConfig();
                    }
                    else {
                        setConfig((Config) value);
                    }
                    break;
                default:;
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case CONFIG:
                    return getConfig();
                default:;
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * @param field <br>
         * @return <br>
         *  */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case CONFIG:
                    return isSetConfig();
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof addConfig_args) {
                return this.equals((addConfig_args) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(addConfig_args that) {
            if (that == null) {
                return false;
            }

            boolean this_present_config = true & this.isSetConfig();
            boolean that_present_config = true & that.isSetConfig();
            if (this_present_config || that_present_config) {
                if (!(this_present_config && that_present_config)) {
                    return false;
                }
                if (!this.config.equals(that.config)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_config = true & (isSetConfig());
            list.add(present_config);
            if (present_config) {
                list.add(config);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(addConfig_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetConfig()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addConfig_args(");
            boolean first = true;

            sb.append("config:");
            if (this.config == null) {
                sb.append("null");
            }
            else {
                sb.append(this.config);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (config != null) {
                config.validate();
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_argsStandardSchemeFactory implements SchemeFactory {
            public addConfig_argsStandardScheme getScheme() {
                return new addConfig_argsStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_argsStandardScheme extends StandardScheme<addConfig_args> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, addConfig_args struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // CONFIG
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.config = new Config();
                                struct.config.read(iprot);
                                struct.setConfigIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, addConfig_args struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.config != null) {
                    oprot.writeFieldBegin(CONFIG_FIELD_DESC);
                    struct.config.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_argsTupleSchemeFactory implements SchemeFactory {
            public addConfig_argsTupleScheme getScheme() {
                return new addConfig_argsTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_argsTupleScheme extends TupleScheme<addConfig_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetConfig()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetConfig()) {
                    struct.config.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addConfig_args struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.config = new Config();
                    struct.config.read(iprot);
                    struct.setConfigIsSet(true);
                }
            }
        }

    }

    /**
     * 
     * <Description> <br> 
     *  
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年6月30日 <br>
     * @since V7.3<br>
     * @see com.fccfc.framework.config.api <br>
     */
    public static class addConfig_result implements
        org.apache.thrift.TBase<addConfig_result, addConfig_result._Fields>, java.io.Serializable, Cloneable,
        Comparable<addConfig_result> {
            
        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "addConfig_result");

        /**
         * schemes
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new addConfig_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new addConfig_resultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;
            /**
             * byName
             */
            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * @param name <br>
             * @return <br>
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            /**
             * _thriftId
             */
            private final short _thriftId;

            /**
             * _fieldName
             */
            private final String _fieldName;

            /**
             * _Fields
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        /**
         * metaDataMap
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addConfig_result.class, metaDataMap);
        }

        /**
         * addConfig_result
         */
        public addConfig_result() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * @param other <br>
         */
        public addConfig_result(addConfig_result other) {
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public addConfig_result deepCopy() {
            return new addConfig_result(this);
        }

        @Override
        public void clear() {
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise 
         * @param field <br>
         * @return <br>
         * */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof addConfig_result) {
                return this.equals((addConfig_result) that);
            }
            return false;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(addConfig_result that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(addConfig_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("addConfig_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_resultStandardSchemeFactory implements SchemeFactory {
            public addConfig_resultStandardScheme getScheme() {
                return new addConfig_resultStandardScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_resultStandardScheme extends StandardScheme<addConfig_result> {

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, addConfig_result struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * 
             * Description: <br> 
             *  
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, addConfig_result struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_resultTupleSchemeFactory implements SchemeFactory {
            public addConfig_resultTupleScheme getScheme() {
                return new addConfig_resultTupleScheme();
            }
        }

        /**
         * 
         * <Description> <br> 
         *  
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年6月30日 <br>
         * @since V7.3<br>
         * @see com.fccfc.framework.config.api <br>
         */
        private static class addConfig_resultTupleScheme extends TupleScheme<addConfig_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, addConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, addConfig_result struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

}
