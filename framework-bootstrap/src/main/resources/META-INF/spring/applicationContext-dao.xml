<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- 配置数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<property name="validationQuery" value="${db.validation.querysql}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat" />

		<property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
			</list>
		</property>
	</bean>

	<bean id="log-filter" class="com.fccfc.framework.log.core.filter.SqlLogFilter" />

	<!-- Hibernate sessionFactory 配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">none</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解方式配置 -->
		<property name="packagesToScan">
			<list>
				<value>com.fccfc.*</value>
			</list>
		</property>
	</bean>

	<!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 包含事务的方法 -->
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="destroy*" propagation="REQUIRED"
				read-only="false" rollback-for="Exception" />
			<tx:method name="regist" propagation="REQUIRED" read-only="false"
				rollback-for="Exception" />
			<tx:method name="getToken" propagation="REQUIRED"
				read-only="false" rollback-for="Exception" />

			<!-- 不包含事务 -->
			<tx:method name="addTransactionLog" propagation="NOT_SUPPORTED"
				read-only="false" />
			<tx:method name="addTransactionStackLog" propagation="NOT_SUPPORTED"
				read-only="false" />
			<tx:method name="sendMessage" propagation="NOT_SUPPORTED"
				read-only="false" />
			<tx:method name="reSendMessage" propagation="NOT_SUPPORTED"
				read-only="false" />

			<!-- 其它的都为只读方法， 有事务就包含在事务之内，没有事务就不开启事务 -->
			<tx:method name="*" propagation="SUPPORTS" read-only="true"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(public * com.fccfc..*Service*.*(..))" />
	</aop:config>

	<bean id="baseHibernateDao" class="com.fccfc.framework.db.hibernate.BaseHibernateDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- Dao配置 -->
	<bean id="daoConfig" class="com.fccfc.framework.db.core.config.DaoConfig">
		<property name="cache" value="true" />
		<property name="dbType" value="${db.type}" />
		<property name="baseDao" ref="baseHibernateDao" />
		<property name="callBackType" value="org.hibernate.transform.ResultTransformer" />
	</bean>

	<!-- Dao动态代理类 -->
	<bean id="springDaoHandler" class="com.fccfc.framework.db.spring.SpringDaoHandler">
		<property name="daoConfig" ref="daoConfig" />
		<property name="sqlExcutor" ref="baseHibernateDao" />
	</bean>

	<bean id="sqlHandler"
		class="com.fccfc.framework.db.core.annotation.handler.SQLHandler">
		<property name="daoConfig" ref="daoConfig" />
	</bean>

	<!-- 注册Dao接口 -->
	<bean class="com.fccfc.framework.db.spring.AutoProxyBeanFactory">
		<property name="packagesToScan">
			<list>
				<value>com.fccfc.*</value>
			</list>
		</property>
		<property name="interceptors">
			<list>
				<value>springDaoHandler</value>
			</list>
		</property>
		<property name="handler" ref="sqlHandler" />
	</bean>
</beans>