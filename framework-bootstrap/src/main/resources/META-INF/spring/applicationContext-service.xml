<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
	default-autowire="byName" default-lazy-init="false">

	<aop:aspectj-autoproxy />

	<!-- 和本地bean一样实现服务 -->
	<bean id="configService"
		class="com.fccfc.framework.config.core.service.impl.ConfigServiceImpl" />

	<!-- 缓存拦截器 -->
	<bean id="cacheMethodInterceptor" class="com.fccfc.framework.cache.core.annotation.CacheAdvice" />
	<aop:config>
		<!--切入点 -->
		<aop:pointcut id="cachePoint"
			expression="execution(public * com.fccfc..*.*(..)) and !execution(public * com.fccfc..*Dao.*(..))" />
		<!--在该切入点使用自定义拦截器 -->
		<aop:advisor pointcut-ref="cachePoint" advice-ref="cacheMethodInterceptor" />
	</aop:config>

	<!-- 设置日志拦截 -->
	<aop:config>
		<aop:aspect id="transactionAdviceAspect" ref="transactionAdviceBean"
			order="2">
			<aop:pointcut id="transactionPointcut"
				expression="
                 (execution(public * com.fccfc..*Service*.*(..)) 
                 or execution(public * com.fccfc..*Controller*.*(..))
                 or execution(public * com.fccfc..*Interceptor*.*(..))
                 or execution(public * com.fccfc..*Excutor*.*(..))
                 or execution(public * com.fccfc..*Handler*.*(..)))
                 and !execution(public * com.fccfc..*.set*(..))
                 and !execution(public * com.fccfc..*.get*())
                 and !execution(public * com.fccfc..*.is*())
                 and !execution(* com.fccfc.framework.log..*.*(..))" />
			<aop:before pointcut-ref="transactionPointcut" method="before" />
			<aop:after-returning pointcut-ref="transactionPointcut"
				method="afterReturning" returning="returnValue" />
			<aop:after-throwing pointcut-ref="transactionPointcut"
				method="afterThrowing" throwing="ex" />
		</aop:aspect>
	</aop:config>

	<bean id="transactionAdviceBean"
		class="com.fccfc.framework.log.core.advice.BusinessTransactionAdivce">

		<!-- 该配置项用于配置方法超过多长时间需要记录日志 （秒） -->
		<property name="maxExcuteTime" value="${log.max.execute.time}" />
		<!-- 服务运行栈的最大深度 -->
		<property name="maxDeepLen" value="${log.max.deep.size}" />

		<!-- 日志服务 -->
		<property name="serviceMap">
			<map>
				<entry key="file" value-ref="transLoggerService4File" />
			</map>
		</property>
		<property name="opendService" value="${log.open.logservice}" />
	</bean>
</beans>