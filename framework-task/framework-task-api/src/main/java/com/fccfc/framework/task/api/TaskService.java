/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.task.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <Description> <br>
 * 
 * @author yang.zhipeng <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年7月3日 <br>
 * @since V1.0<br>
 * @see com.fccfc.framework.task.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-30")
public class TaskService {

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public interface Iface {

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void scheduleAllTask() throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param simpleTrigger <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void simpleScheduleTask(Task task, SimpleTrigger simpleTrigger) throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param cronTrigger <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void cronScheduleTask(Task task, CronTrigger cronTrigger) throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void pause(Task task) throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resume(Task task) throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void remove(Task task) throws org.apache.thrift.TException;

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public interface AsyncIface {

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void scheduleAllTask(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param simpleTrigger <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void simpleScheduleTask(Task task, SimpleTrigger simpleTrigger,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param cronTrigger <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void cronScheduleTask(Task task, CronTrigger cronTrigger,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void pause(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resume(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void remove(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class Client extends org.apache.thrift.TServiceClient implements Iface {

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {

            /**
             * Factory
             */
            public Factory() {
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @return <br>
             */
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param oprot <br>
             * @return <br>
             */
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        /**
         * Client
         * 
         * @param prot <br>
         */
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        /**
         * Client
         * 
         * @param iprot <br>
         * @param oprot <br>
         */
        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void scheduleAllTask() throws org.apache.thrift.TException {
            sendScheduleAllTask();
            recvScheduleAllTask();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendScheduleAllTask() throws org.apache.thrift.TException {
            ScheduleAllTaskArgs args = new ScheduleAllTaskArgs();
            sendBase("scheduleAllTask", args);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvScheduleAllTask() throws org.apache.thrift.TException {
            ScheduleAllTaskResult result = new ScheduleAllTaskResult();
            receiveBase(result, "scheduleAllTask");
            return;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param simpleTrigger <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void simpleScheduleTask(Task task, SimpleTrigger simpleTrigger) throws org.apache.thrift.TException {
            sendSimpleScheduleTask(task, simpleTrigger);
            recvSimpleScheduleTask();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param simpleTrigger <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendSimpleScheduleTask(Task task, SimpleTrigger simpleTrigger) throws org.apache.thrift.TException {
            SimpleScheduleTaskArgs args = new SimpleScheduleTaskArgs();
            args.setTask(task);
            args.setSimpleTrigger(simpleTrigger);
            sendBase("simpleScheduleTask", args);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvSimpleScheduleTask() throws org.apache.thrift.TException {
            SimpleScheduleTaskResult result = new SimpleScheduleTaskResult();
            receiveBase(result, "simpleScheduleTask");
            return;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param cronTrigger <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void cronScheduleTask(Task task, CronTrigger cronTrigger) throws org.apache.thrift.TException {
            sendCronScheduleTask(task, cronTrigger);
            recvCronScheduleTask();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param cronTrigger <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendCronScheduleTask(Task task, CronTrigger cronTrigger) throws org.apache.thrift.TException {
            CronScheduleTaskArgs args = new CronScheduleTaskArgs();
            args.setTask(task);
            args.setCronTrigger(cronTrigger);
            sendBase("cronScheduleTask", args);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvCronScheduleTask() throws org.apache.thrift.TException {
            CronScheduleTaskResult result = new CronScheduleTaskResult();
            receiveBase(result, "cronScheduleTask");
            return;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void pause(Task task) throws org.apache.thrift.TException {
            sendPause(task);
            recvPause();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendPause(Task task) throws org.apache.thrift.TException {
            PauseArgs args = new PauseArgs();
            args.setTask(task);
            sendBase("pause", args);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvPause() throws org.apache.thrift.TException {
            PauseResult result = new PauseResult();
            receiveBase(result, "pause");
            return;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resume(Task task) throws org.apache.thrift.TException {
            sendResume(task);
            recvResume();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendResume(Task task) throws org.apache.thrift.TException {
            ResumeArgs args = new ResumeArgs();
            args.setTask(task);
            sendBase("resume", args);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvResume() throws org.apache.thrift.TException {
            ResumeResult result = new ResumeResult();
            receiveBase(result, "resume");
            return;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void remove(Task task) throws org.apache.thrift.TException {
            sendRemove(task);
            recvRemove();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void sendRemove(Task task) throws org.apache.thrift.TException {
            RemoveArgs args = new RemoveArgs();
            args.setTask(task);
            sendBase("remove", args);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void recvRemove() throws org.apache.thrift.TException {
            RemoveResult result = new RemoveResult();
            receiveBase(result, "remove");
            return;
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {

            /**
             * clientManager
             */
            private org.apache.thrift.async.TAsyncClientManager clientManager;

            /**
             * protocolFactory
             */
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            /**
             * clientManager
             * 
             * @param clientManager <br>
             * @param protocolFactory <br>
             */
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param transport <br>
             * @return <br>
             */
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        /**
         * protocolFactory
         * 
         * @param protocolFactory <br>
         * @param clientManager <br>
         * @param transport <br>
         */
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
            org.apache.thrift.async.TAsyncClientManager clientManager,
            org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void scheduleAllTask(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            ScheduleAllTaskCall method_call = new ScheduleAllTaskCall(resultHandler, this, ___protocolFactory,
                ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class ScheduleAllTaskCall extends org.apache.thrift.async.TAsyncMethodCall {

            /**
             * scheduleAllTask_call
             * 
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public ScheduleAllTaskCall(org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("scheduleAllTask",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                ScheduleAllTaskArgs args = new ScheduleAllTaskArgs();
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvScheduleAllTask();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param simpleTrigger <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void simpleScheduleTask(Task task, SimpleTrigger simpleTrigger,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            SimpleScheduleTaskCall method_call = new SimpleScheduleTaskCall(task, simpleTrigger, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class SimpleScheduleTaskCall extends org.apache.thrift.async.TAsyncMethodCall {

            /**
             * task
             */
            private Task task;

            /**
             * simpleTrigger
             */
            private SimpleTrigger simpleTrigger;

            /**
             * simpleScheduleTask_call
             * 
             * @param task <br>
             * @param simpleTrigger <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public SimpleScheduleTaskCall(Task task, SimpleTrigger simpleTrigger,
                org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.task = task;
                this.simpleTrigger = simpleTrigger;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("simpleScheduleTask",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                SimpleScheduleTaskArgs args = new SimpleScheduleTaskArgs();
                args.setTask(task);
                args.setSimpleTrigger(simpleTrigger);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvSimpleScheduleTask();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param cronTrigger <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void cronScheduleTask(Task task, CronTrigger cronTrigger,
            org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            CronScheduleTaskCall method_call = new CronScheduleTaskCall(task, cronTrigger, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class CronScheduleTaskCall extends org.apache.thrift.async.TAsyncMethodCall {

            /**
             * task
             */
            private Task task;

            /**
             * cronTrigger
             */
            private CronTrigger cronTrigger;

            /**
             * cronScheduleTask_call
             * 
             * @param task <br>
             * @param cronTrigger <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public CronScheduleTaskCall(Task task, CronTrigger cronTrigger,
                org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.task = task;
                this.cronTrigger = cronTrigger;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cronScheduleTask",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                CronScheduleTaskArgs args = new CronScheduleTaskArgs();
                args.setTask(task);
                args.setCronTrigger(cronTrigger);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvCronScheduleTask();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void pause(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            PauseCall method_call = new PauseCall(task, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class PauseCall extends org.apache.thrift.async.TAsyncMethodCall {

            /**
             * task
             */
            private Task task;

            /**
             * pause_call
             * 
             * @param task <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public PauseCall(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.task = task;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pause",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                PauseArgs args = new PauseArgs();
                args.setTask(task);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvPause();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void resume(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            ResumeCall method_call = new ResumeCall(task, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class ResumeCall extends org.apache.thrift.async.TAsyncMethodCall {

            /**
             * task
             */
            private Task task;

            /**
             * resume_call
             * 
             * @param task <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public ResumeCall(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.task = task;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resume",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                ResumeArgs args = new ResumeArgs();
                args.setTask(task);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvResume();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @param resultHandler <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void remove(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException {
            checkReady();
            RemoveCall method_call = new RemoveCall(task, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class RemoveCall extends org.apache.thrift.async.TAsyncMethodCall {

            /**
             * task
             */
            private Task task;

            /**
             * remove_call
             * 
             * @param task <br>
             * @param resultHandler <br>
             * @param client <br>
             * @param protocolFactory <br>
             * @param transport <br>
             * @throws org.apache.thrift.TException <br>
             */
            public RemoveCall(Task task, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.task = task;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param prot <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                RemoveArgs args = new RemoveArgs();
                args.setTask(task);
                args.write(prot);
                prot.writeMessageEnd();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
                    getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recvRemove();
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements
        org.apache.thrift.TProcessor {

        /**
         * LOGGER
         */
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        /**
         * Processor
         * 
         * @param iface <br>
         */
        public Processor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        /**
         * Processor
         * 
         * @param iface <br>
         * @param processMap <br>
         */
        protected Processor(I iface,
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param <I> <br>
         * @param processMap <br>
         * @return <br>
         */
        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("scheduleAllTask", new ScheduleAllTask());
            processMap.put("simpleScheduleTask", new SimpleScheduleTask());
            processMap.put("cronScheduleTask", new CronScheduleTask());
            processMap.put("pause", new Pause());
            processMap.put("resume", new Resume());
            processMap.put("remove", new Remove());
            return processMap;
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class ScheduleAllTask<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, ScheduleAllTaskArgs> {

            /**
             * scheduleAllTask
             */
            public ScheduleAllTask() {
                super("scheduleAllTask");
            }

            public ScheduleAllTaskArgs getEmptyArgsInstance() {
                return new ScheduleAllTaskArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public ScheduleAllTaskResult getResult(I iface, ScheduleAllTaskArgs args)
                throws org.apache.thrift.TException {
                ScheduleAllTaskResult result = new ScheduleAllTaskResult();
                iface.scheduleAllTask();
                return result;
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class SimpleScheduleTask<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, SimpleScheduleTaskArgs> {

            /**
             * simpleScheduleTask
             */
            public SimpleScheduleTask() {
                super("simpleScheduleTask");
            }

            public SimpleScheduleTaskArgs getEmptyArgsInstance() {
                return new SimpleScheduleTaskArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public SimpleScheduleTaskResult getResult(I iface, SimpleScheduleTaskArgs args)
                throws org.apache.thrift.TException {
                SimpleScheduleTaskResult result = new SimpleScheduleTaskResult();
                iface.simpleScheduleTask(args.task, args.simpleTrigger);
                return result;
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class CronScheduleTask<I extends Iface> extends
            org.apache.thrift.ProcessFunction<I, CronScheduleTaskArgs> {

            /**
             * cronScheduleTask
             */
            public CronScheduleTask() {
                super("cronScheduleTask");
            }

            public CronScheduleTaskArgs getEmptyArgsInstance() {
                return new CronScheduleTaskArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public CronScheduleTaskResult getResult(I iface, CronScheduleTaskArgs args)
                throws org.apache.thrift.TException {
                CronScheduleTaskResult result = new CronScheduleTaskResult();
                iface.cronScheduleTask(args.task, args.cronTrigger);
                return result;
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Pause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PauseArgs> {

            /**
             * pause
             */
            public Pause() {
                super("pause");
            }

            public PauseArgs getEmptyArgsInstance() {
                return new PauseArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public PauseResult getResult(I iface, PauseArgs args) throws org.apache.thrift.TException {
                PauseResult result = new PauseResult();
                iface.pause(args.task);
                return result;
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Resume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ResumeArgs> {

            /**
             * resume
             */
            public Resume() {
                super("resume");
            }

            public ResumeArgs getEmptyArgsInstance() {
                return new ResumeArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public ResumeResult getResult(I iface, ResumeArgs args) throws org.apache.thrift.TException {
                ResumeResult result = new ResumeResult();
                iface.resume(args.task);
                return result;
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RemoveArgs> {

            /**
             * Remove
             */
            public Remove() {
                super("remove");
            }

            public RemoveArgs getEmptyArgsInstance() {
                return new RemoveArgs();
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @return <br>
             * @throws org.apache.thrift.TException <br>
             */
            public RemoveResult getResult(I iface, RemoveArgs args) throws org.apache.thrift.TException {
                RemoveResult result = new RemoveResult();
                iface.remove(args.task);
                return result;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {

        /**
         * LOGGER
         */
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        /**
         * AsyncProcessor
         * 
         * @param iface <br>
         */
        public AsyncProcessor(I iface) {
            super(
                iface,
                getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        /**
         * AsyncProcessor
         * 
         * @param iface <br>
         * @param processMap <br>
         */
        protected AsyncProcessor(I iface,
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param <I> <br>
         * @param processMap <br>
         * @return <br>
         */
        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("scheduleAllTask", new ScheduleAllTask());
            processMap.put("simpleScheduleTask", new SimpleScheduleTask());
            processMap.put("cronScheduleTask", new CronScheduleTask());
            processMap.put("pause", new Pause());
            processMap.put("resume", new Resume());
            processMap.put("remove", new Remove());
            return processMap;
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class ScheduleAllTask<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, ScheduleAllTaskArgs, Void> {

            /**
             * scheduleAllTask
             */
            public ScheduleAllTask() {
                super("scheduleAllTask");
            }

            public ScheduleAllTaskArgs getEmptyArgsInstance() {
                return new ScheduleAllTaskArgs();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        ScheduleAllTaskResult result = new ScheduleAllTaskResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        ScheduleAllTaskResult result = new ScheduleAllTaskResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, ScheduleAllTaskArgs args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.scheduleAllTask(resultHandler);
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class SimpleScheduleTask<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, SimpleScheduleTaskArgs, Void> {

            /**
             * simpleScheduleTask
             */
            public SimpleScheduleTask() {
                super("simpleScheduleTask");
            }

            public SimpleScheduleTaskArgs getEmptyArgsInstance() {
                return new SimpleScheduleTaskArgs();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        SimpleScheduleTaskResult result = new SimpleScheduleTaskResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        SimpleScheduleTaskResult result = new SimpleScheduleTaskResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, SimpleScheduleTaskArgs args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.simpleScheduleTask(args.task, args.simpleTrigger, resultHandler);
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class CronScheduleTask<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, CronScheduleTaskArgs, Void> {

            /**
             * cronScheduleTask
             */
            public CronScheduleTask() {
                super("cronScheduleTask");
            }

            public CronScheduleTaskArgs getEmptyArgsInstance() {
                return new CronScheduleTaskArgs();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        CronScheduleTaskResult result = new CronScheduleTaskResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        CronScheduleTaskResult result = new CronScheduleTaskResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, CronScheduleTaskArgs args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.cronScheduleTask(args.task, args.cronTrigger, resultHandler);
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Pause<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, PauseArgs, Void> {

            /**
             * pause
             */
            public Pause() {
                super("pause");
            }

            public PauseArgs getEmptyArgsInstance() {
                return new PauseArgs();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        PauseResult result = new PauseResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        PauseResult result = new PauseResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, PauseArgs args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
                throws TException {
                iface.pause(args.task, resultHandler);
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Resume<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, ResumeArgs, Void> {

            /**
             * Resume
             */
            public Resume() {
                super("resume");
            }

            public ResumeArgs getEmptyArgsInstance() {
                return new ResumeArgs();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        ResumeResult result = new ResumeResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        ResumeResult result = new ResumeResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, ResumeArgs args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
                throws TException {
                iface.resume(args.task, resultHandler);
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        public static class Remove<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, RemoveArgs, Void> {

            /**
             * Remove
             */
            public Remove() {
                super("remove");
            }

            public RemoveArgs getEmptyArgsInstance() {
                return new RemoveArgs();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param fb <br>
             * @param seqid <br>
             * @return <br>
             */
            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                        RemoveResult result = new RemoveResult();
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        RemoveResult result = new RemoveResult();
                        msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                        msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                            org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iface <br>
             * @param args <br>
             * @param resultHandler <br>
             * @throws TException <br>
             */
            public void start(I iface, RemoveArgs args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
                throws TException {
                iface.remove(args.task, resultHandler);
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class ScheduleAllTaskArgs implements
        org.apache.thrift.TBase<ScheduleAllTaskArgs, ScheduleAllTaskArgs._Fields>, java.io.Serializable, Cloneable,
        Comparable<ScheduleAllTaskArgs> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "ScheduleAllTaskArgs");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new ScheduleAllTaskArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new ScheduleAllTaskArgsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScheduleAllTaskArgs.class, META_DATA_MAP);
        }

        /**
         * ScheduleAllTaskArgs
         */
        public ScheduleAllTaskArgs() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public ScheduleAllTaskArgs(ScheduleAllTaskArgs other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public ScheduleAllTaskArgs deepCopy() {
            return new ScheduleAllTaskArgs(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof ScheduleAllTaskArgs) {
                return this.equals((ScheduleAllTaskArgs) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(ScheduleAllTaskArgs that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(ScheduleAllTaskArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ScheduleAllTaskArgs(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ScheduleAllTaskArgsStandardSchemeFactory implements SchemeFactory {
            public ScheduleAllTaskArgsStandardScheme getScheme() {
                return new ScheduleAllTaskArgsStandardScheme();
            }
        }

        private static class ScheduleAllTaskArgsStandardScheme extends StandardScheme<ScheduleAllTaskArgs> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, ScheduleAllTaskArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, ScheduleAllTaskArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ScheduleAllTaskArgsTupleSchemeFactory implements SchemeFactory {
            public ScheduleAllTaskArgsTupleScheme getScheme() {
                return new ScheduleAllTaskArgsTupleScheme();
            }
        }

        private static class ScheduleAllTaskArgsTupleScheme extends TupleScheme<ScheduleAllTaskArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ScheduleAllTaskArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ScheduleAllTaskArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class ScheduleAllTaskResult implements
        org.apache.thrift.TBase<ScheduleAllTaskResult, ScheduleAllTaskResult._Fields>, java.io.Serializable, Cloneable,
        Comparable<ScheduleAllTaskResult> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "ScheduleAllTaskResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new ScheduleAllTaskResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new ScheduleAllTaskResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ScheduleAllTaskResult.class, META_DATA_MAP);
        }

        /**
         * ScheduleAllTaskResult
         */
        public ScheduleAllTaskResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public ScheduleAllTaskResult(ScheduleAllTaskResult other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public ScheduleAllTaskResult deepCopy() {
            return new ScheduleAllTaskResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof ScheduleAllTaskResult) {
                return this.equals((ScheduleAllTaskResult) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(ScheduleAllTaskResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(ScheduleAllTaskResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ScheduleAllTaskResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ScheduleAllTaskResultStandardSchemeFactory implements SchemeFactory {
            public ScheduleAllTaskResultStandardScheme getScheme() {
                return new ScheduleAllTaskResultStandardScheme();
            }
        }

        private static class ScheduleAllTaskResultStandardScheme extends StandardScheme<ScheduleAllTaskResult> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, ScheduleAllTaskResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, ScheduleAllTaskResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ScheduleAllTaskResultTupleSchemeFactory implements SchemeFactory {
            public ScheduleAllTaskResultTupleScheme getScheme() {
                return new ScheduleAllTaskResultTupleScheme();
            }
        }

        private static class ScheduleAllTaskResultTupleScheme extends TupleScheme<ScheduleAllTaskResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ScheduleAllTaskResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ScheduleAllTaskResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class SimpleScheduleTaskArgs implements
        org.apache.thrift.TBase<SimpleScheduleTaskArgs, SimpleScheduleTaskArgs._Fields>, java.io.Serializable,
        Cloneable, Comparable<SimpleScheduleTaskArgs> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "SimpleScheduleTaskArgs");

        /**
         * TASK_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "task", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * SIMPLE_TRIGGER_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField SIMPLE_TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "simpleTrigger", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new SimpleScheduleTaskArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new SimpleScheduleTaskArgsTupleSchemeFactory());
        }

        /**
         * task
         */
        public Task task; // required

        /**
         * simpleTrigger
         */
        public SimpleTrigger simpleTrigger; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * TASK
             */
            TASK((short) 1, "task"), SIMPLE_TRIGGER((short) 2, "simpleTrigger");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TASK
                        return TASK;
                    case 2: // SIMPLE_TRIGGER
                        return SIMPLE_TRIGGER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Task.class)));
            tmpMap.put(_Fields.SIMPLE_TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("simpleTrigger",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, SimpleTrigger.class)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleScheduleTaskArgs.class, META_DATA_MAP);
        }

        /**
         * SimpleScheduleTaskArgs
         */
        public SimpleScheduleTaskArgs() {
        }

        /**
         * SimpleScheduleTaskArgs
         * 
         * @param task <br>
         * @param simpleTrigger <br>
         */
        public SimpleScheduleTaskArgs(Task task, SimpleTrigger simpleTrigger) {
            this();
            this.task = task;
            this.simpleTrigger = simpleTrigger;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public SimpleScheduleTaskArgs(SimpleScheduleTaskArgs other) {
            if (other.isSetTask()) {
                this.task = new Task(other.task);
            }
            if (other.isSetSimpleTrigger()) {
                this.simpleTrigger = new SimpleTrigger(other.simpleTrigger);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public SimpleScheduleTaskArgs deepCopy() {
            return new SimpleScheduleTaskArgs(this);
        }

        @Override
        public void clear() {
            this.task = null;
            this.simpleTrigger = null;
        }

        public Task getTask() {
            return this.task;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @return <br>
         */
        public SimpleScheduleTaskArgs setTask(Task task) {
            this.task = task;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetTask() {
            this.task = null;
        }

        /**
         * Returns true if field task is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetTask() {
            return this.task != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setTaskIsSet(boolean value) {
            if (!value) {
                this.task = null;
            }
        }

        public SimpleTrigger getSimpleTrigger() {
            return this.simpleTrigger;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param simpleTrigger <br>
         * @return <br>
         */
        public SimpleScheduleTaskArgs setSimpleTrigger(SimpleTrigger simpleTrigger) {
            this.simpleTrigger = simpleTrigger;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetSimpleTrigger() {
            this.simpleTrigger = null;
        }

        /**
         * Returns true if field simpleTrigger is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetSimpleTrigger() {
            return this.simpleTrigger != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setSimpleTriggerIsSet(boolean value) {
            if (!value) {
                this.simpleTrigger = null;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TASK:
                    if (value == null) {
                        unsetTask();
                    }
                    else {
                        setTask((Task) value);
                    }
                    break;

                case SIMPLE_TRIGGER:
                    if (value == null) {
                        unsetSimpleTrigger();
                    }
                    else {
                        setSimpleTrigger((SimpleTrigger) value);
                    }
                    break;
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TASK:
                    return getTask();

                case SIMPLE_TRIGGER:
                    return getSimpleTrigger();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TASK:
                    return isSetTask();
                case SIMPLE_TRIGGER:
                    return isSetSimpleTrigger();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof SimpleScheduleTaskArgs) {
                return this.equals((SimpleScheduleTaskArgs) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(SimpleScheduleTaskArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_task = true & this.isSetTask();
            boolean that_present_task = true & that.isSetTask();
            if (this_present_task || that_present_task) {
                if (!(this_present_task && that_present_task)) {
                    return false;
                }
                if (!this.task.equals(that.task)) {
                    return false;
                }
            }

            boolean this_present_simpleTrigger = true & this.isSetSimpleTrigger();
            boolean that_present_simpleTrigger = true & that.isSetSimpleTrigger();
            if (this_present_simpleTrigger || that_present_simpleTrigger) {
                if (!(this_present_simpleTrigger && that_present_simpleTrigger)) {
                    return false;
                }
                if (!this.simpleTrigger.equals(that.simpleTrigger)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_task = true & (isSetTask());
            list.add(present_task);
            if (present_task) {
                list.add(task);
            }

            boolean present_simpleTrigger = true & (isSetSimpleTrigger());
            list.add(present_simpleTrigger);
            if (present_simpleTrigger) {
                list.add(simpleTrigger);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(SimpleScheduleTaskArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTask()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSimpleTrigger()).compareTo(other.isSetSimpleTrigger());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSimpleTrigger()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simpleTrigger, other.simpleTrigger);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SimpleScheduleTaskArgs(");
            boolean first = true;

            sb.append("task:");
            if (this.task == null) {
                sb.append("null");
            }
            else {
                sb.append(this.task);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("simpleTrigger:");
            if (this.simpleTrigger == null) {
                sb.append("null");
            }
            else {
                sb.append(this.simpleTrigger);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (task != null) {
                task.validate();
            }
            if (simpleTrigger != null) {
                simpleTrigger.validate();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SimpleScheduleTaskArgsStandardSchemeFactory implements SchemeFactory {
            public SimpleScheduleTaskArgsStandardScheme getScheme() {
                return new SimpleScheduleTaskArgsStandardScheme();
            }
        }

        private static class SimpleScheduleTaskArgsStandardScheme extends StandardScheme<SimpleScheduleTaskArgs> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TASK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.task = new Task();
                                struct.task.read(iprot);
                                struct.setTaskIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // SIMPLE_TRIGGER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.simpleTrigger = new SimpleTrigger();
                                struct.simpleTrigger.read(iprot);
                                struct.setSimpleTriggerIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.task != null) {
                    oprot.writeFieldBegin(TASK_FIELD_DESC);
                    struct.task.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.simpleTrigger != null) {
                    oprot.writeFieldBegin(SIMPLE_TRIGGER_FIELD_DESC);
                    struct.simpleTrigger.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SimpleScheduleTaskArgsTupleSchemeFactory implements SchemeFactory {
            public SimpleScheduleTaskArgsTupleScheme getScheme() {
                return new SimpleScheduleTaskArgsTupleScheme();
            }
        }

        private static class SimpleScheduleTaskArgsTupleScheme extends TupleScheme<SimpleScheduleTaskArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SimpleScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTask()) {
                    optionals.set(0);
                }
                if (struct.isSetSimpleTrigger()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetTask()) {
                    struct.task.write(oprot);
                }
                if (struct.isSetSimpleTrigger()) {
                    struct.simpleTrigger.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SimpleScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.task = new Task();
                    struct.task.read(iprot);
                    struct.setTaskIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.simpleTrigger = new SimpleTrigger();
                    struct.simpleTrigger.read(iprot);
                    struct.setSimpleTriggerIsSet(true);
                }
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class SimpleScheduleTaskResult implements
        org.apache.thrift.TBase<SimpleScheduleTaskResult, SimpleScheduleTaskResult._Fields>, java.io.Serializable,
        Cloneable, Comparable<SimpleScheduleTaskResult> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "SimpleScheduleTaskResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new SimpleScheduleTaskResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new SimpleScheduleTaskResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleScheduleTaskResult.class,
                META_DATA_MAP);
        }

        /**
         * SimpleScheduleTaskResult
         */
        public SimpleScheduleTaskResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public SimpleScheduleTaskResult(SimpleScheduleTaskResult other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public SimpleScheduleTaskResult deepCopy() {
            return new SimpleScheduleTaskResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof SimpleScheduleTaskResult) {
                return this.equals((SimpleScheduleTaskResult) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(SimpleScheduleTaskResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(SimpleScheduleTaskResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("SimpleScheduleTaskResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class SimpleScheduleTaskResultStandardSchemeFactory implements SchemeFactory {
            public SimpleScheduleTaskResultStandardScheme getScheme() {
                return new SimpleScheduleTaskResultStandardScheme();
            }
        }

        private static class SimpleScheduleTaskResultStandardScheme extends StandardScheme<SimpleScheduleTaskResult> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class SimpleScheduleTaskResultTupleSchemeFactory implements SchemeFactory {
            public SimpleScheduleTaskResultTupleScheme getScheme() {
                return new SimpleScheduleTaskResultTupleScheme();
            }
        }

        private static class SimpleScheduleTaskResultTupleScheme extends TupleScheme<SimpleScheduleTaskResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, SimpleScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, SimpleScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class CronScheduleTaskArgs implements
        org.apache.thrift.TBase<CronScheduleTaskArgs, CronScheduleTaskArgs._Fields>, java.io.Serializable, Cloneable,
        Comparable<CronScheduleTaskArgs> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "CronScheduleTaskArgs");

        /**
         * TASK_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "task", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * CRON_TRIGGER_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField CRON_TRIGGER_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "cronTrigger", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new CronScheduleTaskArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new CronScheduleTaskArgsTupleSchemeFactory());
        }

        /**
         * task
         */
        public Task task; // required

        /**
         * cronTrigger
         */
        public CronTrigger cronTrigger; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * TASK
             */
            TASK((short) 1, "task"), CRON_TRIGGER((short) 2, "cronTrigger");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TASK
                        return TASK;
                    case 2: // CRON_TRIGGER
                        return CRON_TRIGGER;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Task.class)));
            tmpMap.put(_Fields.CRON_TRIGGER, new org.apache.thrift.meta_data.FieldMetaData("cronTrigger",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, CronTrigger.class)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CronScheduleTaskArgs.class, META_DATA_MAP);
        }

        /**
         * CronScheduleTaskArgs
         */
        public CronScheduleTaskArgs() {
        }

        /**
         * CronScheduleTaskArgs
         * 
         * @param task <br>
         * @param cronTrigger <br>
         */
        public CronScheduleTaskArgs(Task task, CronTrigger cronTrigger) {
            this();
            this.task = task;
            this.cronTrigger = cronTrigger;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public CronScheduleTaskArgs(CronScheduleTaskArgs other) {
            if (other.isSetTask()) {
                this.task = new Task(other.task);
            }
            if (other.isSetCronTrigger()) {
                this.cronTrigger = new CronTrigger(other.cronTrigger);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public CronScheduleTaskArgs deepCopy() {
            return new CronScheduleTaskArgs(this);
        }

        @Override
        public void clear() {
            this.task = null;
            this.cronTrigger = null;
        }

        public Task getTask() {
            return this.task;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @return <br>
         */
        public CronScheduleTaskArgs setTask(Task task) {
            this.task = task;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetTask() {
            this.task = null;
        }

        /**
         * Returns true if field task is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetTask() {
            return this.task != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setTaskIsSet(boolean value) {
            if (!value) {
                this.task = null;
            }
        }

        public CronTrigger getCronTrigger() {
            return this.cronTrigger;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param cronTrigger <br>
         * @return <br>
         */
        public CronScheduleTaskArgs setCronTrigger(CronTrigger cronTrigger) {
            this.cronTrigger = cronTrigger;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetCronTrigger() {
            this.cronTrigger = null;
        }

        /**
         * Returns true if field cronTrigger is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetCronTrigger() {
            return this.cronTrigger != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setCronTriggerIsSet(boolean value) {
            if (!value) {
                this.cronTrigger = null;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TASK:
                    if (value == null) {
                        unsetTask();
                    }
                    else {
                        setTask((Task) value);
                    }
                    break;

                case CRON_TRIGGER:
                    if (value == null) {
                        unsetCronTrigger();
                    }
                    else {
                        setCronTrigger((CronTrigger) value);
                    }
                    break;
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TASK:
                    return getTask();

                case CRON_TRIGGER:
                    return getCronTrigger();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TASK:
                    return isSetTask();
                case CRON_TRIGGER:
                    return isSetCronTrigger();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof CronScheduleTaskArgs) {
                return this.equals((CronScheduleTaskArgs) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(CronScheduleTaskArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_task = true & this.isSetTask();
            boolean that_present_task = true & that.isSetTask();
            if (this_present_task || that_present_task) {
                if (!(this_present_task && that_present_task)) {
                    return false;
                }
                if (!this.task.equals(that.task)) {
                    return false;
                }
            }

            boolean this_present_cronTrigger = true & this.isSetCronTrigger();
            boolean that_present_cronTrigger = true & that.isSetCronTrigger();
            if (this_present_cronTrigger || that_present_cronTrigger) {
                if (!(this_present_cronTrigger && that_present_cronTrigger)) {
                    return false;
                }
                if (!this.cronTrigger.equals(that.cronTrigger)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_task = true & (isSetTask());
            list.add(present_task);
            if (present_task) {
                list.add(task);
            }

            boolean present_cronTrigger = true & (isSetCronTrigger());
            list.add(present_cronTrigger);
            if (present_cronTrigger) {
                list.add(cronTrigger);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(CronScheduleTaskArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTask()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetCronTrigger()).compareTo(other.isSetCronTrigger());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetCronTrigger()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cronTrigger, other.cronTrigger);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("CronScheduleTaskArgs(");
            boolean first = true;

            sb.append("task:");
            if (this.task == null) {
                sb.append("null");
            }
            else {
                sb.append(this.task);
            }
            first = false;
            if (!first) {
                sb.append(", ");
            }
            sb.append("cronTrigger:");
            if (this.cronTrigger == null) {
                sb.append("null");
            }
            else {
                sb.append(this.cronTrigger);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (task != null) {
                task.validate();
            }
            if (cronTrigger != null) {
                cronTrigger.validate();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class CronScheduleTaskArgsStandardSchemeFactory implements SchemeFactory {
            public CronScheduleTaskArgsStandardScheme getScheme() {
                return new CronScheduleTaskArgsStandardScheme();
            }
        }

        private static class CronScheduleTaskArgsStandardScheme extends StandardScheme<CronScheduleTaskArgs> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, CronScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TASK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.task = new Task();
                                struct.task.read(iprot);
                                struct.setTaskIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // CRON_TRIGGER
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.cronTrigger = new CronTrigger();
                                struct.cronTrigger.read(iprot);
                                struct.setCronTriggerIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, CronScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.task != null) {
                    oprot.writeFieldBegin(TASK_FIELD_DESC);
                    struct.task.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.cronTrigger != null) {
                    oprot.writeFieldBegin(CRON_TRIGGER_FIELD_DESC);
                    struct.cronTrigger.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class CronScheduleTaskArgsTupleSchemeFactory implements SchemeFactory {
            public CronScheduleTaskArgsTupleScheme getScheme() {
                return new CronScheduleTaskArgsTupleScheme();
            }
        }

        private static class CronScheduleTaskArgsTupleScheme extends TupleScheme<CronScheduleTaskArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, CronScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTask()) {
                    optionals.set(0);
                }
                if (struct.isSetCronTrigger()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetTask()) {
                    struct.task.write(oprot);
                }
                if (struct.isSetCronTrigger()) {
                    struct.cronTrigger.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, CronScheduleTaskArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.task = new Task();
                    struct.task.read(iprot);
                    struct.setTaskIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.cronTrigger = new CronTrigger();
                    struct.cronTrigger.read(iprot);
                    struct.setCronTriggerIsSet(true);
                }
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月4日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class CronScheduleTaskResult implements
        org.apache.thrift.TBase<CronScheduleTaskResult, CronScheduleTaskResult._Fields>, java.io.Serializable,
        Cloneable, Comparable<CronScheduleTaskResult> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "CronScheduleTaskResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new CronScheduleTaskResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new CronScheduleTaskResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CronScheduleTaskResult.class, META_DATA_MAP);
        }

        /**
         * CronScheduleTaskResult
         */
        public CronScheduleTaskResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public CronScheduleTaskResult(CronScheduleTaskResult other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public CronScheduleTaskResult deepCopy() {
            return new CronScheduleTaskResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof CronScheduleTaskResult) {
                return this.equals((CronScheduleTaskResult) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(CronScheduleTaskResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(CronScheduleTaskResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("CronScheduleTaskResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class CronScheduleTaskResultStandardSchemeFactory implements SchemeFactory {
            public CronScheduleTaskResultStandardScheme getScheme() {
                return new CronScheduleTaskResultStandardScheme();
            }
        }

        private static class CronScheduleTaskResultStandardScheme extends StandardScheme<CronScheduleTaskResult> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, CronScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, CronScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        private static class CronScheduleTaskResultTupleSchemeFactory implements SchemeFactory {
            public CronScheduleTaskResultTupleScheme getScheme() {
                return new CronScheduleTaskResultTupleScheme();
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        private static class CronScheduleTaskResultTupleScheme extends TupleScheme<CronScheduleTaskResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, CronScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, CronScheduleTaskResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class PauseArgs implements org.apache.thrift.TBase<PauseArgs, PauseArgs._Fields>,
        java.io.Serializable, Cloneable, Comparable<PauseArgs> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "PauseArgs");

        /**
         * TASK_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "task", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new PauseArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new PauseArgsTupleSchemeFactory());
        }

        /**
         * task
         */
        public Task task; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * TASK
             */
            TASK((short) 1, "task");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TASK
                        return TASK;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Task.class)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PauseArgs.class, META_DATA_MAP);
        }

        /**
         * PauseArgs
         */
        public PauseArgs() {
        }

        /**
         * PauseArgs
         * 
         * @param task <br>
         */
        public PauseArgs(Task task) {
            this();
            this.task = task;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public PauseArgs(PauseArgs other) {
            if (other.isSetTask()) {
                this.task = new Task(other.task);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public PauseArgs deepCopy() {
            return new PauseArgs(this);
        }

        @Override
        public void clear() {
            this.task = null;
        }

        public Task getTask() {
            return this.task;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @return <br>
         */
        public PauseArgs setTask(Task task) {
            this.task = task;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetTask() {
            this.task = null;
        }

        /**
         * Returns true if field task is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetTask() {
            return this.task != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setTaskIsSet(boolean value) {
            if (!value) {
                this.task = null;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TASK:
                    if (value == null) {
                        unsetTask();
                    }
                    else {
                        setTask((Task) value);
                    }
                    break;
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TASK:
                    return getTask();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TASK:
                    return isSetTask();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof PauseArgs) {
                return this.equals((PauseArgs) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(PauseArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_task = true & this.isSetTask();
            boolean that_present_task = true & that.isSetTask();
            if (this_present_task || that_present_task) {
                if (!(this_present_task && that_present_task)) {
                    return false;
                }
                if (!this.task.equals(that.task)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_task = true & (isSetTask());
            list.add(present_task);
            if (present_task) {
                list.add(task);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(PauseArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTask()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("PauseArgs(");
            boolean first = true;

            sb.append("task:");
            if (this.task == null) {
                sb.append("null");
            }
            else {
                sb.append(this.task);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (task != null) {
                task.validate();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * <Description> <br>
         * 
         * @author yang.zhipeng <br>
         * @version 1.0<br>
         * @taskId <br>
         * @CreateDate 2015年7月3日 <br>
         * @since V1.0<br>
         * @see com.fccfc.framework.task.api <br>
         */
        private static class PauseArgsStandardSchemeFactory implements SchemeFactory {
            public PauseArgsStandardScheme getScheme() {
                return new PauseArgsStandardScheme();
            }
        }

        private static class PauseArgsStandardScheme extends StandardScheme<PauseArgs> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, PauseArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TASK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.task = new Task();
                                struct.task.read(iprot);
                                struct.setTaskIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, PauseArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.task != null) {
                    oprot.writeFieldBegin(TASK_FIELD_DESC);
                    struct.task.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class PauseArgsTupleSchemeFactory implements SchemeFactory {
            public PauseArgsTupleScheme getScheme() {
                return new PauseArgsTupleScheme();
            }
        }

        private static class PauseArgsTupleScheme extends TupleScheme<PauseArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, PauseArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTask()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetTask()) {
                    struct.task.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, PauseArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.task = new Task();
                    struct.task.read(iprot);
                    struct.setTaskIsSet(true);
                }
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class PauseResult implements org.apache.thrift.TBase<PauseResult, PauseResult._Fields>,
        java.io.Serializable, Cloneable, Comparable<PauseResult> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "PauseResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new PauseResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new PauseResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PauseResult.class, META_DATA_MAP);
        }

        /**
         * PauseResult
         */
        public PauseResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public PauseResult(PauseResult other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public PauseResult deepCopy() {
            return new PauseResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof PauseResult) {
                return this.equals((PauseResult) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(PauseResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(PauseResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("PauseResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class PauseResultStandardSchemeFactory implements SchemeFactory {
            public PauseResultStandardScheme getScheme() {
                return new PauseResultStandardScheme();
            }
        }

        private static class PauseResultStandardScheme extends StandardScheme<PauseResult> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, PauseResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, PauseResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class PauseResultTupleSchemeFactory implements SchemeFactory {
            public PauseResultTupleScheme getScheme() {
                return new PauseResultTupleScheme();
            }
        }

        private static class PauseResultTupleScheme extends TupleScheme<PauseResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, PauseResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, PauseResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class ResumeArgs implements org.apache.thrift.TBase<ResumeArgs, ResumeArgs._Fields>,
        java.io.Serializable, Cloneable, Comparable<ResumeArgs> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "ResumeArgs");

        /**
         * TASK_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "task", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new ResumeArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new ResumeArgsTupleSchemeFactory());
        }

        /**
         * task
         */
        public Task task; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * TASK
             */
            TASK((short) 1, "task");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TASK
                        return TASK;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Task.class)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResumeArgs.class, META_DATA_MAP);
        }

        /**
         * ResumeArgs
         */
        public ResumeArgs() {
        }

        /**
         * ResumeArgs
         * 
         * @param task <br>
         */
        public ResumeArgs(Task task) {
            this();
            this.task = task;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public ResumeArgs(ResumeArgs other) {
            if (other.isSetTask()) {
                this.task = new Task(other.task);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public ResumeArgs deepCopy() {
            return new ResumeArgs(this);
        }

        @Override
        public void clear() {
            this.task = null;
        }

        public Task getTask() {
            return this.task;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @return <br>
         */
        public ResumeArgs setTask(Task task) {
            this.task = task;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetTask() {
            this.task = null;
        }

        /**
         * Returns true if field task is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetTask() {
            return this.task != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setTaskIsSet(boolean value) {
            if (!value) {
                this.task = null;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TASK:
                    if (value == null) {
                        unsetTask();
                    }
                    else {
                        setTask((Task) value);
                    }
                    break;
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TASK:
                    return getTask();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TASK:
                    return isSetTask();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof ResumeArgs) {
                return this.equals((ResumeArgs) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(ResumeArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_task = true & this.isSetTask();
            boolean that_present_task = true & that.isSetTask();
            if (this_present_task || that_present_task) {
                if (!(this_present_task && that_present_task)) {
                    return false;
                }
                if (!this.task.equals(that.task)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_task = true & (isSetTask());
            list.add(present_task);
            if (present_task) {
                list.add(task);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(ResumeArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTask()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ResumeArgs(");
            boolean first = true;

            sb.append("task:");
            if (this.task == null) {
                sb.append("null");
            }
            else {
                sb.append(this.task);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (task != null) {
                task.validate();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ResumeArgsStandardSchemeFactory implements SchemeFactory {
            public ResumeArgsStandardScheme getScheme() {
                return new ResumeArgsStandardScheme();
            }
        }

        private static class ResumeArgsStandardScheme extends StandardScheme<ResumeArgs> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, ResumeArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TASK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.task = new Task();
                                struct.task.read(iprot);
                                struct.setTaskIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, ResumeArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.task != null) {
                    oprot.writeFieldBegin(TASK_FIELD_DESC);
                    struct.task.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ResumeArgsTupleSchemeFactory implements SchemeFactory {
            public ResumeArgsTupleScheme getScheme() {
                return new ResumeArgsTupleScheme();
            }
        }

        private static class ResumeArgsTupleScheme extends TupleScheme<ResumeArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ResumeArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTask()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetTask()) {
                    struct.task.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ResumeArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.task = new Task();
                    struct.task.read(iprot);
                    struct.setTaskIsSet(true);
                }
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class ResumeResult implements org.apache.thrift.TBase<ResumeResult, ResumeResult._Fields>,
        java.io.Serializable, Cloneable, Comparable<ResumeResult> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "ResumeResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new ResumeResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new ResumeResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResumeResult.class, META_DATA_MAP);
        }

        /**
         * ResumeResult
         */
        public ResumeResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public ResumeResult(ResumeResult other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public ResumeResult deepCopy() {
            return new ResumeResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof ResumeResult) {
                return this.equals((ResumeResult) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(ResumeResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(ResumeResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ResumeResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ResumeResultStandardSchemeFactory implements SchemeFactory {
            public ResumeResultStandardScheme getScheme() {
                return new ResumeResultStandardScheme();
            }
        }

        private static class ResumeResultStandardScheme extends StandardScheme<ResumeResult> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, ResumeResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, ResumeResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ResumeResultTupleSchemeFactory implements SchemeFactory {
            public ResumeResultTupleScheme getScheme() {
                return new ResumeResultTupleScheme();
            }
        }

        private static class ResumeResultTupleScheme extends TupleScheme<ResumeResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ResumeResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ResumeResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class RemoveArgs implements org.apache.thrift.TBase<RemoveArgs, RemoveArgs._Fields>,
        java.io.Serializable, Cloneable, Comparable<RemoveArgs> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "RemoveArgs");

        /**
         * TASK_FIELD_DESC
         */
        private static final org.apache.thrift.protocol.TField TASK_FIELD_DESC = new org.apache.thrift.protocol.TField(
            "task", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new RemoveArgsStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new RemoveArgsTupleSchemeFactory());
        }

        /**
         * task
         */
        public Task task; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {

            /**
             * TASK
             */
            TASK((short) 1, "task");

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // TASK
                        return TASK;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * isset id assignments
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            tmpMap.put(_Fields.TASK, new org.apache.thrift.meta_data.FieldMetaData("task",
                org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
                    org.apache.thrift.protocol.TType.STRUCT, Task.class)));
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveArgs.class, META_DATA_MAP);
        }

        /**
         * RemoveArgs
         */
        public RemoveArgs() {
        }

        /**
         * RemoveArgs
         * 
         * @param task <br>
         */
        public RemoveArgs(Task task) {
            this();
            this.task = task;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public RemoveArgs(RemoveArgs other) {
            if (other.isSetTask()) {
                this.task = new Task(other.task);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public RemoveArgs deepCopy() {
            return new RemoveArgs(this);
        }

        @Override
        public void clear() {
            this.task = null;
        }

        public Task getTask() {
            return this.task;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param task <br>
         * @return <br>
         */
        public RemoveArgs setTask(Task task) {
            this.task = task;
            return this;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * <br>
         */
        public void unsetTask() {
            this.task = null;
        }

        /**
         * Returns true if field task is set (has been assigned a value) and false otherwise
         * 
         * @return <br>
         */
        public boolean isSetTask() {
            return this.task != null;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param value <br>
         */
        public void setTaskIsSet(boolean value) {
            if (!value) {
                this.task = null;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case TASK:
                    if (value == null) {
                        unsetTask();
                    }
                    else {
                        setTask((Task) value);
                    }
                    break;
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                case TASK:
                    return getTask();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case TASK:
                    return isSetTask();
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof RemoveArgs) {
                return this.equals((RemoveArgs) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(RemoveArgs that) {
            if (that == null) {
                return false;
            }

            boolean this_present_task = true & this.isSetTask();
            boolean that_present_task = true & that.isSetTask();
            if (this_present_task || that_present_task) {
                if (!(this_present_task && that_present_task)) {
                    return false;
                }
                if (!this.task.equals(that.task)) {
                    return false;
                }
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_task = true & (isSetTask());
            list.add(present_task);
            if (present_task) {
                list.add(task);
            }

            return list.hashCode();
        }

        @Override
        public int compareTo(RemoveArgs other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTask()).compareTo(other.isSetTask());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTask()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task, other.task);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RemoveArgs(");
            boolean first = true;

            sb.append("task:");
            if (this.task == null) {
                sb.append("null");
            }
            else {
                sb.append(this.task);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (task != null) {
                task.validate();
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RemoveArgsStandardSchemeFactory implements SchemeFactory {
            public RemoveArgsStandardScheme getScheme() {
                return new RemoveArgsStandardScheme();
            }
        }

        private static class RemoveArgsStandardScheme extends StandardScheme<RemoveArgs> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveArgs struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // TASK
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.task = new Task();
                                struct.task.read(iprot);
                                struct.setTaskIsSet(true);
                            }
                            else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveArgs struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.task != null) {
                    oprot.writeFieldBegin(TASK_FIELD_DESC);
                    struct.task.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RemoveArgsTupleSchemeFactory implements SchemeFactory {
            public RemoveArgsTupleScheme getScheme() {
                return new RemoveArgsTupleScheme();
            }
        }

        private static class RemoveArgsTupleScheme extends TupleScheme<RemoveArgs> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RemoveArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTask()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetTask()) {
                    struct.task.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RemoveArgs struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.task = new Task();
                    struct.task.read(iprot);
                    struct.setTaskIsSet(true);
                }
            }
        }

    }

    /**
     * <Description> <br>
     * 
     * @author yang.zhipeng <br>
     * @version 1.0<br>
     * @taskId <br>
     * @CreateDate 2015年7月3日 <br>
     * @since V1.0<br>
     * @see com.fccfc.framework.task.api <br>
     */
    public static class RemoveResult implements org.apache.thrift.TBase<RemoveResult, RemoveResult._Fields>,
        java.io.Serializable, Cloneable, Comparable<RemoveResult> {

        /**
         * STRUCT_DESC
         */
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
            "RemoveResult");

        /**
         * SCHEMES
         */
        private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            SCHEMES.put(StandardScheme.class, new RemoveResultStandardSchemeFactory());
            SCHEMES.put(TupleScheme.class, new RemoveResultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            /**
             * BY_NAME
             */
            private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    BY_NAME.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             * 
             * @param fieldId <br>
             * @return <br>
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) {
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                }
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             * 
             * @param name <br>
             * @return <br>
             */
            public static _Fields findBYNAME(String name) {
                return BY_NAME.get(name);
            }

            /**
             * thriftId
             */
            private final short thriftId;

            /**
             * fieldName
             */
            private final String fieldName;

            /**
             * _Fields
             * 
             * @param thriftId <br>
             * @param fieldName <br>
             */
            _Fields(short thriftId, String fieldName) {
                this.thriftId = thriftId;
                this.fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return thriftId;
            }

            public String getFieldName() {
                return fieldName;
            }
        }

        /**
         * META_DATA_MAP
         */
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
                _Fields.class);
            META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoveResult.class, META_DATA_MAP);
        }

        /**
         * RemoveResult
         */
        public RemoveResult() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         * 
         * @param other <br>
         */
        public RemoveResult(RemoveResult other) {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @return <br>
         */
        public RemoveResult deepCopy() {
            return new RemoveResult(this);
        }

        @Override
        public void clear() {
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @param value <br>
         */
        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                default:
                    ;
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param field <br>
         * @return <br>
         */
        public Object getFieldValue(_Fields field) {
            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        /**
         * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
         * 
         * @param field <br>
         * @return <br>
         */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                default:
                    ;
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null) {
                return false;
            }
            if (that instanceof RemoveResult) {
                return this.equals((RemoveResult) that);
            }
            return false;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param that <br>
         * @return <br>
         */
        public boolean equals(RemoveResult that) {
            if (that == null) {
                return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(RemoveResult other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param fieldId <br>
         * @return <br>
         */
        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("RemoveResult(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param out <br>
         * @throws java.io.IOException <br>
         */
        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /**
         * Description: <br>
         * 
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param in <br>
         * @throws java.io.IOException <br>
         * @throws ClassNotFoundException <br>
         */
        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class RemoveResultStandardSchemeFactory implements SchemeFactory {
            public RemoveResultStandardScheme getScheme() {
                return new RemoveResultStandardScheme();
            }
        }

        private static class RemoveResultStandardScheme extends StandardScheme<RemoveResult> {

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param iprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void read(org.apache.thrift.protocol.TProtocol iprot, RemoveResult struct)
                throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            /**
             * Description: <br>
             * 
             * @author yang.zhipeng <br>
             * @taskId <br>
             * @param oprot <br>
             * @param struct <br>
             * @throws org.apache.thrift.TException <br>
             */
            public void write(org.apache.thrift.protocol.TProtocol oprot, RemoveResult struct)
                throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class RemoveResultTupleSchemeFactory implements SchemeFactory {
            public RemoveResultTupleScheme getScheme() {
                return new RemoveResultTupleScheme();
            }
        }

        private static class RemoveResultTupleScheme extends TupleScheme<RemoveResult> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, RemoveResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, RemoveResult struct)
                throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

}
