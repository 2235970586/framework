/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.task.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;


/**
 * 
 * <Description> <br> 
 *  
 * @author yang.zhipeng <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年7月2日 <br>
 * @since V7.3<br>
 * @see com.fccfc.framework.task.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-30")
public class SimpleTrigger implements org.apache.thrift.TBase<SimpleTrigger, SimpleTrigger._Fields>,
    java.io.Serializable, Cloneable, Comparable<SimpleTrigger> {
    
    /**
     * STRUCT_DESC
     */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "SimpleTrigger");

    /**
     * TRIGGER_ID_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TRIGGER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "triggerId", org.apache.thrift.protocol.TType.I32, (short) 1);

    /**
     * TRIGGER_NAME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TRIGGER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "triggerName", org.apache.thrift.protocol.TType.STRING, (short) 2);

    /**
     * CREATE_TIME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "createTime", org.apache.thrift.protocol.TType.I64, (short) 3);

    /**
     * OPERATOR_ID_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "operatorId", org.apache.thrift.protocol.TType.I32, (short) 4);

    /**
     * TRIGGER_TYPE_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TRIGGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "triggerType", org.apache.thrift.protocol.TType.I16, (short) 5);

    /**
     * BEGIN_TIME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "beginTime", org.apache.thrift.protocol.TType.I64, (short) 6);

    /**
     * END_TIME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "endTime", org.apache.thrift.protocol.TType.I64, (short) 7);

    /**
     * TIMES_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "times", org.apache.thrift.protocol.TType.I32, (short) 8);

    /**
     * EXECUTE_INTERVAL_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField EXECUTE_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "executeInterval", org.apache.thrift.protocol.TType.I32, (short) 9);

    /**
     * INTERVAL_UNIT_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField INTERVAL_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "intervalUnit", org.apache.thrift.protocol.TType.STRING, (short) 10);

    /**
     * SCHEMES
     */
    private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        SCHEMES.put(StandardScheme.class, new SimpleTriggerStandardSchemeFactory());
        SCHEMES.put(TupleScheme.class, new SimpleTriggerTupleSchemeFactory());
    }

    /**
     * triggerId
     */
    public int triggerId; // optional

    /**
     * triggerName
     */
    public String triggerName; // required

    /**
     * createTime
     */
    public long createTime; // optional

    /**
     * operatorId
     */
    public int operatorId; // optional

    /**
     * triggerType
     */
    public short triggerType; // optional

    /**
     * beginTime
     */
    public long beginTime; // optional

    /**
     * endTime
     */
    public long endTime; // optional

    /**
     * times
     */
    public int times; // optional

    /**
     * executeInterval
     */
    public int executeInterval; // optional

    /**
     * intervalUnit
     */
    public String intervalUnit; // optional

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        /**
         * TRIGGER_NAME
         */
        TRIGGER_ID((short) 1, "triggerId"), TRIGGER_NAME((short) 2, "triggerName"), CREATE_TIME((short) 3, "createTime"), OPERATOR_ID(
            (short) 4, "operatorId"), 
        
        /**
         * TRIGGER_TYPE
         */
        TRIGGER_TYPE((short) 5, "triggerType"), BEGIN_TIME((short) 6, "beginTime"), END_TIME(
            (short) 7, "endTime"), 
        
        /**
         * TIMES
         */
        TIMES((short) 8, "times"), EXECUTE_INTERVAL((short) 9, "executeInterval"), INTERVAL_UNIT(
            (short) 10, "intervalUnit");

        /**
         * BY_NAME
         */
        private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                BY_NAME.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         * @param fieldId <br>
         * @return <br>
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TRIGGER_ID
                    return TRIGGER_ID;
                case 2: // TRIGGER_NAME
                    return TRIGGER_NAME;
                case 3: // CREATE_TIME
                    return CREATE_TIME;
                case 4: // OPERATOR_ID
                    return OPERATOR_ID;
                case 5: // TRIGGER_TYPE
                    return TRIGGER_TYPE;
                case 6: // BEGIN_TIME
                    return BEGIN_TIME;
                case 7: // END_TIME
                    return END_TIME;
                case 8: // TIMES
                    return TIMES;
                case 9: // EXECUTE_INTERVAL
                    return EXECUTE_INTERVAL;
                case 10: // INTERVAL_UNIT
                    return INTERVAL_UNIT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         * @param fieldId <br>
         * @return <br>
         * 
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         * @param name <br>
         * @return <br>
         */
        public static _Fields findBYNAME(String name) {
            return BY_NAME.get(name);
        }

        /**
         * thriftId
         */
        private final short thriftId;

        /**
         * fieldName
         */
        private final String fieldName;

        /**
         * _Fields
         * @param thriftId <br>
         * @param fieldName <br>
         */
        _Fields(short thriftId, String fieldName) {
            this.thriftId = thriftId;
            this.fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return thriftId;
        }

        public String getFieldName() {
            return fieldName;
        }
    }

    /**
     *  isset id assignments
     */
    private static final int TRIGGERID_ISSET_ID = 0;

    /**
     * CREATETIME_ISSET_ID
     */
    private static final int CREATETIME_ISSET_ID = 1;

    /**
     * OPERATORID_ISSET_ID
     */
    private static final int OPERATORID_ISSET_ID = 2;

    /**
     * TRIGGERTYPE_ISSET_ID
     */
    private static final int TRIGGERTYPE_ISSET_ID = 3;

    /**
     * BEGINTIME_ISSET_ID
     */
    private static final int BEGINTIME_ISSET_ID = 4;

    /**
     * ENDTIME_ISSET_ID
     */
    private static final int ENDTIME_ISSET_ID = 5;

    /**
     * TIMES_ISSET_ID
     */
    private static final int TIMES_ISSET_ID = 6;

    /**
     * EXECUTEINTERVAL_ISSET_ID
     */
    private static final int EXECUTEINTERVAL_ISSET_ID = 7;

    /**
     * issetBitfield
     */
    private byte issetBitfield = 0;

    /**
     * OPTIONALS
     */
    private static final _Fields OPTIONALS[] = {
        _Fields.TRIGGER_ID, _Fields.CREATE_TIME, _Fields.OPERATOR_ID, _Fields.TRIGGER_TYPE, _Fields.BEGIN_TIME,
        _Fields.END_TIME, _Fields.TIMES, _Fields.EXECUTE_INTERVAL, _Fields.INTERVAL_UNIT
    };

    /**
     * META_DATA_MAP
     */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
            _Fields.class);
        tmpMap.put(_Fields.TRIGGER_ID, new org.apache.thrift.meta_data.FieldMetaData("triggerId",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TRIGGER_NAME, new org.apache.thrift.meta_data.FieldMetaData("triggerName",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TRIGGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("triggerType",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I16)));
        tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.EXECUTE_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("executeInterval",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.INTERVAL_UNIT, new org.apache.thrift.meta_data.FieldMetaData("intervalUnit",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleTrigger.class, META_DATA_MAP);
    }

    public SimpleTrigger() {
    }

    public SimpleTrigger(String triggerName) {
        this();
        this.triggerName = triggerName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public SimpleTrigger(SimpleTrigger other) {
        issetBitfield = other.issetBitfield;
        this.triggerId = other.triggerId;
        if (other.isSetTriggerName()) {
            this.triggerName = other.triggerName;
        }
        this.createTime = other.createTime;
        this.operatorId = other.operatorId;
        this.triggerType = other.triggerType;
        this.beginTime = other.beginTime;
        this.endTime = other.endTime;
        this.times = other.times;
        this.executeInterval = other.executeInterval;
        if (other.isSetIntervalUnit()) {
            this.intervalUnit = other.intervalUnit;
        }
    }

    public SimpleTrigger deepCopy() {
        return new SimpleTrigger(this);
    }

    @Override
    public void clear() {
        setTriggerIdIsSet(false);
        this.triggerId = 0;
        this.triggerName = null;
        setCreateTimeIsSet(false);
        this.createTime = 0;
        setOperatorIdIsSet(false);
        this.operatorId = 0;
        setTriggerTypeIsSet(false);
        this.triggerType = 0;
        setBeginTimeIsSet(false);
        this.beginTime = 0;
        setEndTimeIsSet(false);
        this.endTime = 0;
        setTimesIsSet(false);
        this.times = 0;
        setExecuteIntervalIsSet(false);
        this.executeInterval = 0;
        this.intervalUnit = null;
    }

    public int getTriggerId() {
        return this.triggerId;
    }

    public SimpleTrigger setTriggerId(int triggerId) {
        this.triggerId = triggerId;
        setTriggerIdIsSet(true);
        return this;
    }

    public void unsetTriggerId() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, TRIGGERID_ISSET_ID);
    }

    /** Returns true if field triggerId is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerId() {
        return EncodingUtils.testBit(issetBitfield, TRIGGERID_ISSET_ID);
    }

    public void setTriggerIdIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, TRIGGERID_ISSET_ID, value);
    }

    public String getTriggerName() {
        return this.triggerName;
    }

    public SimpleTrigger setTriggerName(String triggerName) {
        this.triggerName = triggerName;
        return this;
    }

    public void unsetTriggerName() {
        this.triggerName = null;
    }

    /** Returns true if field triggerName is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerName() {
        return this.triggerName != null;
    }

    public void setTriggerNameIsSet(boolean value) {
        if (!value) {
            this.triggerName = null;
        }
    }

    public long getCreateTime() {
        return this.createTime;
    }

    public SimpleTrigger setCreateTime(long createTime) {
        this.createTime = createTime;
        setCreateTimeIsSet(true);
        return this;
    }

    public void unsetCreateTime() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, CREATETIME_ISSET_ID);
    }

    /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
    public boolean isSetCreateTime() {
        return EncodingUtils.testBit(issetBitfield, CREATETIME_ISSET_ID);
    }

    public void setCreateTimeIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, CREATETIME_ISSET_ID, value);
    }

    public int getOperatorId() {
        return this.operatorId;
    }

    public SimpleTrigger setOperatorId(int operatorId) {
        this.operatorId = operatorId;
        setOperatorIdIsSet(true);
        return this;
    }

    public void unsetOperatorId() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, OPERATORID_ISSET_ID);
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
        return EncodingUtils.testBit(issetBitfield, OPERATORID_ISSET_ID);
    }

    public void setOperatorIdIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, OPERATORID_ISSET_ID, value);
    }

    public short getTriggerType() {
        return this.triggerType;
    }

    public SimpleTrigger setTriggerType(short triggerType) {
        this.triggerType = triggerType;
        setTriggerTypeIsSet(true);
        return this;
    }

    public void unsetTriggerType() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, TRIGGERTYPE_ISSET_ID);
    }

    /** Returns true if field triggerType is set (has been assigned a value) and false otherwise */
    public boolean isSetTriggerType() {
        return EncodingUtils.testBit(issetBitfield, TRIGGERTYPE_ISSET_ID);
    }

    public void setTriggerTypeIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, TRIGGERTYPE_ISSET_ID, value);
    }

    public long getBeginTime() {
        return this.beginTime;
    }

    public SimpleTrigger setBeginTime(long beginTime) {
        this.beginTime = beginTime;
        setBeginTimeIsSet(true);
        return this;
    }

    public void unsetBeginTime() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, BEGINTIME_ISSET_ID);
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
        return EncodingUtils.testBit(issetBitfield, BEGINTIME_ISSET_ID);
    }

    public void setBeginTimeIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, BEGINTIME_ISSET_ID, value);
    }

    public long getEndTime() {
        return this.endTime;
    }

    public SimpleTrigger setEndTime(long endTime) {
        this.endTime = endTime;
        setEndTimeIsSet(true);
        return this;
    }

    public void unsetEndTime() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, ENDTIME_ISSET_ID);
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
        return EncodingUtils.testBit(issetBitfield, ENDTIME_ISSET_ID);
    }

    public void setEndTimeIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, ENDTIME_ISSET_ID, value);
    }

    public int getTimes() {
        return this.times;
    }

    public SimpleTrigger setTimes(int times) {
        this.times = times;
        setTimesIsSet(true);
        return this;
    }

    public void unsetTimes() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, TIMES_ISSET_ID);
    }

    /** Returns true if field times is set (has been assigned a value) and false otherwise */
    public boolean isSetTimes() {
        return EncodingUtils.testBit(issetBitfield, TIMES_ISSET_ID);
    }

    public void setTimesIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, TIMES_ISSET_ID, value);
    }

    public int getExecuteInterval() {
        return this.executeInterval;
    }

    public SimpleTrigger setExecuteInterval(int executeInterval) {
        this.executeInterval = executeInterval;
        setExecuteIntervalIsSet(true);
        return this;
    }

    public void unsetExecuteInterval() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, EXECUTEINTERVAL_ISSET_ID);
    }

    /** Returns true if field executeInterval is set (has been assigned a value) and false otherwise */
    public boolean isSetExecuteInterval() {
        return EncodingUtils.testBit(issetBitfield, EXECUTEINTERVAL_ISSET_ID);
    }

    public void setExecuteIntervalIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, EXECUTEINTERVAL_ISSET_ID, value);
    }

    public String getIntervalUnit() {
        return this.intervalUnit;
    }

    public SimpleTrigger setIntervalUnit(String intervalUnit) {
        this.intervalUnit = intervalUnit;
        return this;
    }

    public void unsetIntervalUnit() {
        this.intervalUnit = null;
    }

    /** Returns true if field intervalUnit is set (has been assigned a value) and false otherwise */
    public boolean isSetIntervalUnit() {
        return this.intervalUnit != null;
    }

    public void setIntervalUnitIsSet(boolean value) {
        if (!value) {
            this.intervalUnit = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TRIGGER_ID:
                if (value == null) {
                    unsetTriggerId();
                }
                else {
                    setTriggerId((Integer) value);
                }
                break;

            case TRIGGER_NAME:
                if (value == null) {
                    unsetTriggerName();
                }
                else {
                    setTriggerName((String) value);
                }
                break;

            case CREATE_TIME:
                if (value == null) {
                    unsetCreateTime();
                }
                else {
                    setCreateTime((Long) value);
                }
                break;

            case OPERATOR_ID:
                if (value == null) {
                    unsetOperatorId();
                }
                else {
                    setOperatorId((Integer) value);
                }
                break;

            case TRIGGER_TYPE:
                if (value == null) {
                    unsetTriggerType();
                }
                else {
                    setTriggerType((Short) value);
                }
                break;

            case BEGIN_TIME:
                if (value == null) {
                    unsetBeginTime();
                }
                else {
                    setBeginTime((Long) value);
                }
                break;

            case END_TIME:
                if (value == null) {
                    unsetEndTime();
                }
                else {
                    setEndTime((Long) value);
                }
                break;

            case TIMES:
                if (value == null) {
                    unsetTimes();
                }
                else {
                    setTimes((Integer) value);
                }
                break;

            case EXECUTE_INTERVAL:
                if (value == null) {
                    unsetExecuteInterval();
                }
                else {
                    setExecuteInterval((Integer) value);
                }
                break;

            case INTERVAL_UNIT:
                if (value == null) {
                    unsetIntervalUnit();
                }
                else {
                    setIntervalUnit((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TRIGGER_ID:
                return Integer.valueOf(getTriggerId());

            case TRIGGER_NAME:
                return getTriggerName();

            case CREATE_TIME:
                return Long.valueOf(getCreateTime());

            case OPERATOR_ID:
                return Integer.valueOf(getOperatorId());

            case TRIGGER_TYPE:
                return Short.valueOf(getTriggerType());

            case BEGIN_TIME:
                return Long.valueOf(getBeginTime());

            case END_TIME:
                return Long.valueOf(getEndTime());

            case TIMES:
                return Integer.valueOf(getTimes());

            case EXECUTE_INTERVAL:
                return Integer.valueOf(getExecuteInterval());

            case INTERVAL_UNIT:
                return getIntervalUnit();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TRIGGER_ID:
                return isSetTriggerId();
            case TRIGGER_NAME:
                return isSetTriggerName();
            case CREATE_TIME:
                return isSetCreateTime();
            case OPERATOR_ID:
                return isSetOperatorId();
            case TRIGGER_TYPE:
                return isSetTriggerType();
            case BEGIN_TIME:
                return isSetBeginTime();
            case END_TIME:
                return isSetEndTime();
            case TIMES:
                return isSetTimes();
            case EXECUTE_INTERVAL:
                return isSetExecuteInterval();
            case INTERVAL_UNIT:
                return isSetIntervalUnit();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof SimpleTrigger)
            return this.equals((SimpleTrigger) that);
        return false;
    }

    public boolean equals(SimpleTrigger that) {
        if (that == null)
            return false;

        boolean this_present_triggerId = true && this.isSetTriggerId();
        boolean that_present_triggerId = true && that.isSetTriggerId();
        if (this_present_triggerId || that_present_triggerId) {
            if (!(this_present_triggerId && that_present_triggerId))
                return false;
            if (this.triggerId != that.triggerId)
                return false;
        }

        boolean this_present_triggerName = true && this.isSetTriggerName();
        boolean that_present_triggerName = true && that.isSetTriggerName();
        if (this_present_triggerName || that_present_triggerName) {
            if (!(this_present_triggerName && that_present_triggerName))
                return false;
            if (!this.triggerName.equals(that.triggerName))
                return false;
        }

        boolean this_present_createTime = true && this.isSetCreateTime();
        boolean that_present_createTime = true && that.isSetCreateTime();
        if (this_present_createTime || that_present_createTime) {
            if (!(this_present_createTime && that_present_createTime))
                return false;
            if (this.createTime != that.createTime)
                return false;
        }

        boolean this_present_operatorId = true && this.isSetOperatorId();
        boolean that_present_operatorId = true && that.isSetOperatorId();
        if (this_present_operatorId || that_present_operatorId) {
            if (!(this_present_operatorId && that_present_operatorId))
                return false;
            if (this.operatorId != that.operatorId)
                return false;
        }

        boolean this_present_triggerType = true && this.isSetTriggerType();
        boolean that_present_triggerType = true && that.isSetTriggerType();
        if (this_present_triggerType || that_present_triggerType) {
            if (!(this_present_triggerType && that_present_triggerType))
                return false;
            if (this.triggerType != that.triggerType)
                return false;
        }

        boolean this_present_beginTime = true && this.isSetBeginTime();
        boolean that_present_beginTime = true && that.isSetBeginTime();
        if (this_present_beginTime || that_present_beginTime) {
            if (!(this_present_beginTime && that_present_beginTime))
                return false;
            if (this.beginTime != that.beginTime)
                return false;
        }

        boolean this_present_endTime = true && this.isSetEndTime();
        boolean that_present_endTime = true && that.isSetEndTime();
        if (this_present_endTime || that_present_endTime) {
            if (!(this_present_endTime && that_present_endTime))
                return false;
            if (this.endTime != that.endTime)
                return false;
        }

        boolean this_present_times = true && this.isSetTimes();
        boolean that_present_times = true && that.isSetTimes();
        if (this_present_times || that_present_times) {
            if (!(this_present_times && that_present_times))
                return false;
            if (this.times != that.times)
                return false;
        }

        boolean this_present_executeInterval = true && this.isSetExecuteInterval();
        boolean that_present_executeInterval = true && that.isSetExecuteInterval();
        if (this_present_executeInterval || that_present_executeInterval) {
            if (!(this_present_executeInterval && that_present_executeInterval))
                return false;
            if (this.executeInterval != that.executeInterval)
                return false;
        }

        boolean this_present_intervalUnit = true && this.isSetIntervalUnit();
        boolean that_present_intervalUnit = true && that.isSetIntervalUnit();
        if (this_present_intervalUnit || that_present_intervalUnit) {
            if (!(this_present_intervalUnit && that_present_intervalUnit))
                return false;
            if (!this.intervalUnit.equals(that.intervalUnit))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_triggerId = true && (isSetTriggerId());
        list.add(present_triggerId);
        if (present_triggerId)
            list.add(triggerId);

        boolean present_triggerName = true && (isSetTriggerName());
        list.add(present_triggerName);
        if (present_triggerName)
            list.add(triggerName);

        boolean present_createTime = true && (isSetCreateTime());
        list.add(present_createTime);
        if (present_createTime)
            list.add(createTime);

        boolean present_operatorId = true && (isSetOperatorId());
        list.add(present_operatorId);
        if (present_operatorId)
            list.add(operatorId);

        boolean present_triggerType = true && (isSetTriggerType());
        list.add(present_triggerType);
        if (present_triggerType)
            list.add(triggerType);

        boolean present_beginTime = true && (isSetBeginTime());
        list.add(present_beginTime);
        if (present_beginTime)
            list.add(beginTime);

        boolean present_endTime = true && (isSetEndTime());
        list.add(present_endTime);
        if (present_endTime)
            list.add(endTime);

        boolean present_times = true && (isSetTimes());
        list.add(present_times);
        if (present_times)
            list.add(times);

        boolean present_executeInterval = true && (isSetExecuteInterval());
        list.add(present_executeInterval);
        if (present_executeInterval)
            list.add(executeInterval);

        boolean present_intervalUnit = true && (isSetIntervalUnit());
        list.add(present_intervalUnit);
        if (present_intervalUnit)
            list.add(intervalUnit);

        return list.hashCode();
    }

    @Override
    public int compareTo(SimpleTrigger other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetTriggerId()).compareTo(other.isSetTriggerId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTriggerId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerId, other.triggerId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTriggerName()).compareTo(other.isSetTriggerName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTriggerName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerName, other.triggerName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCreateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOperatorId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTriggerType()).compareTo(other.isSetTriggerType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTriggerType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerType, other.triggerType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(other.isSetBeginTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBeginTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, other.beginTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetEndTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTimes()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetExecuteInterval()).compareTo(other.isSetExecuteInterval());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetExecuteInterval()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeInterval, other.executeInterval);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetIntervalUnit()).compareTo(other.isSetIntervalUnit());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIntervalUnit()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intervalUnit, other.intervalUnit);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("SimpleTrigger(");
        boolean first = true;

        if (isSetTriggerId()) {
            sb.append("triggerId:");
            sb.append(this.triggerId);
            first = false;
        }
        if (!first)
            sb.append(", ");
        sb.append("triggerName:");
        if (this.triggerName == null) {
            sb.append("null");
        }
        else {
            sb.append(this.triggerName);
        }
        first = false;
        if (isSetCreateTime()) {
            if (!first)
                sb.append(", ");
            sb.append("createTime:");
            sb.append(this.createTime);
            first = false;
        }
        if (isSetOperatorId()) {
            if (!first)
                sb.append(", ");
            sb.append("operatorId:");
            sb.append(this.operatorId);
            first = false;
        }
        if (isSetTriggerType()) {
            if (!first)
                sb.append(", ");
            sb.append("triggerType:");
            sb.append(this.triggerType);
            first = false;
        }
        if (isSetBeginTime()) {
            if (!first)
                sb.append(", ");
            sb.append("beginTime:");
            sb.append(this.beginTime);
            first = false;
        }
        if (isSetEndTime()) {
            if (!first)
                sb.append(", ");
            sb.append("endTime:");
            sb.append(this.endTime);
            first = false;
        }
        if (isSetTimes()) {
            if (!first)
                sb.append(", ");
            sb.append("times:");
            sb.append(this.times);
            first = false;
        }
        if (isSetExecuteInterval()) {
            if (!first)
                sb.append(", ");
            sb.append("executeInterval:");
            sb.append(this.executeInterval);
            first = false;
        }
        if (isSetIntervalUnit()) {
            if (!first)
                sb.append(", ");
            sb.append("intervalUnit:");
            if (this.intervalUnit == null) {
                sb.append("null");
            }
            else {
                sb.append(this.intervalUnit);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (triggerName == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'triggerName' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
                out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param in
     * @throws java.io.IOException
     * @throws ClassNotFoundException <br>
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the
            // default constructor.
            issetBitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class SimpleTriggerStandardSchemeFactory implements SchemeFactory {
        public SimpleTriggerStandardScheme getScheme() {
            return new SimpleTriggerStandardScheme();
        }
    }

    private static class SimpleTriggerStandardScheme extends StandardScheme<SimpleTrigger> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleTrigger struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TRIGGER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.triggerId = iprot.readI32();
                            struct.setTriggerIdIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TRIGGER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.triggerName = iprot.readString();
                            struct.setTriggerNameIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // CREATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.createTime = iprot.readI64();
                            struct.setCreateTimeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // OPERATOR_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.operatorId = iprot.readI32();
                            struct.setOperatorIdIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // TRIGGER_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                            struct.triggerType = iprot.readI16();
                            struct.setTriggerTypeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // BEGIN_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.beginTime = iprot.readI64();
                            struct.setBeginTimeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 7: // END_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.endTime = iprot.readI64();
                            struct.setEndTimeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 8: // TIMES
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.times = iprot.readI32();
                            struct.setTimesIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 9: // EXECUTE_INTERVAL
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.executeInterval = iprot.readI32();
                            struct.setExecuteIntervalIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 10: // INTERVAL_UNIT
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.intervalUnit = iprot.readString();
                            struct.setIntervalUnitIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleTrigger struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetTriggerId()) {
                oprot.writeFieldBegin(TRIGGER_ID_FIELD_DESC);
                oprot.writeI32(struct.triggerId);
                oprot.writeFieldEnd();
            }
            if (struct.triggerName != null) {
                oprot.writeFieldBegin(TRIGGER_NAME_FIELD_DESC);
                oprot.writeString(struct.triggerName);
                oprot.writeFieldEnd();
            }
            if (struct.isSetCreateTime()) {
                oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
                oprot.writeI64(struct.createTime);
                oprot.writeFieldEnd();
            }
            if (struct.isSetOperatorId()) {
                oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
                oprot.writeI32(struct.operatorId);
                oprot.writeFieldEnd();
            }
            if (struct.isSetTriggerType()) {
                oprot.writeFieldBegin(TRIGGER_TYPE_FIELD_DESC);
                oprot.writeI16(struct.triggerType);
                oprot.writeFieldEnd();
            }
            if (struct.isSetBeginTime()) {
                oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
                oprot.writeI64(struct.beginTime);
                oprot.writeFieldEnd();
            }
            if (struct.isSetEndTime()) {
                oprot.writeFieldBegin(END_TIME_FIELD_DESC);
                oprot.writeI64(struct.endTime);
                oprot.writeFieldEnd();
            }
            if (struct.isSetTimes()) {
                oprot.writeFieldBegin(TIMES_FIELD_DESC);
                oprot.writeI32(struct.times);
                oprot.writeFieldEnd();
            }
            if (struct.isSetExecuteInterval()) {
                oprot.writeFieldBegin(EXECUTE_INTERVAL_FIELD_DESC);
                oprot.writeI32(struct.executeInterval);
                oprot.writeFieldEnd();
            }
            if (struct.intervalUnit != null) {
                if (struct.isSetIntervalUnit()) {
                    oprot.writeFieldBegin(INTERVAL_UNIT_FIELD_DESC);
                    oprot.writeString(struct.intervalUnit);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class SimpleTriggerTupleSchemeFactory implements SchemeFactory {
        public SimpleTriggerTupleScheme getScheme() {
            return new SimpleTriggerTupleScheme();
        }
    }

    private static class SimpleTriggerTupleScheme extends TupleScheme<SimpleTrigger> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, SimpleTrigger struct)
            throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.triggerName);
            BitSet optionals = new BitSet();
            if (struct.isSetTriggerId()) {
                optionals.set(0);
            }
            if (struct.isSetCreateTime()) {
                optionals.set(1);
            }
            if (struct.isSetOperatorId()) {
                optionals.set(2);
            }
            if (struct.isSetTriggerType()) {
                optionals.set(3);
            }
            if (struct.isSetBeginTime()) {
                optionals.set(4);
            }
            if (struct.isSetEndTime()) {
                optionals.set(5);
            }
            if (struct.isSetTimes()) {
                optionals.set(6);
            }
            if (struct.isSetExecuteInterval()) {
                optionals.set(7);
            }
            if (struct.isSetIntervalUnit()) {
                optionals.set(8);
            }
            oprot.writeBitSet(optionals, 9);
            if (struct.isSetTriggerId()) {
                oprot.writeI32(struct.triggerId);
            }
            if (struct.isSetCreateTime()) {
                oprot.writeI64(struct.createTime);
            }
            if (struct.isSetOperatorId()) {
                oprot.writeI32(struct.operatorId);
            }
            if (struct.isSetTriggerType()) {
                oprot.writeI16(struct.triggerType);
            }
            if (struct.isSetBeginTime()) {
                oprot.writeI64(struct.beginTime);
            }
            if (struct.isSetEndTime()) {
                oprot.writeI64(struct.endTime);
            }
            if (struct.isSetTimes()) {
                oprot.writeI32(struct.times);
            }
            if (struct.isSetExecuteInterval()) {
                oprot.writeI32(struct.executeInterval);
            }
            if (struct.isSetIntervalUnit()) {
                oprot.writeString(struct.intervalUnit);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, SimpleTrigger struct)
            throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.triggerName = iprot.readString();
            struct.setTriggerNameIsSet(true);
            BitSet incoming = iprot.readBitSet(9);
            if (incoming.get(0)) {
                struct.triggerId = iprot.readI32();
                struct.setTriggerIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.createTime = iprot.readI64();
                struct.setCreateTimeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.operatorId = iprot.readI32();
                struct.setOperatorIdIsSet(true);
            }
            if (incoming.get(3)) {
                struct.triggerType = iprot.readI16();
                struct.setTriggerTypeIsSet(true);
            }
            if (incoming.get(4)) {
                struct.beginTime = iprot.readI64();
                struct.setBeginTimeIsSet(true);
            }
            if (incoming.get(5)) {
                struct.endTime = iprot.readI64();
                struct.setEndTimeIsSet(true);
            }
            if (incoming.get(6)) {
                struct.times = iprot.readI32();
                struct.setTimesIsSet(true);
            }
            if (incoming.get(7)) {
                struct.executeInterval = iprot.readI32();
                struct.setExecuteIntervalIsSet(true);
            }
            if (incoming.get(8)) {
                struct.intervalUnit = iprot.readString();
                struct.setIntervalUnitIsSet(true);
            }
        }
    }

}
