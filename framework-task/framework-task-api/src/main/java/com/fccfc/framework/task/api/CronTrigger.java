/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fccfc.framework.task.api;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

/**
 * 
 * <Description> <br> 
 *  
 * @author wang wei <br>
 * @version 1.0<br>
 * @taskId <br>
 * @CreateDate 2015年8月24日 <br>
 * @since V1.0<br>
 * @see com.fccfc.framework.task.api <br>
 */
@SuppressWarnings({
    "cast", "rawtypes", "serial", "unchecked"
})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-7-15")
public class CronTrigger implements org.apache.thrift.TBase<CronTrigger, CronTrigger._Fields>, java.io.Serializable,
    Cloneable, Comparable<CronTrigger> {
    
    /**
     * STRUCT_DESC
     */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
        "CronTrigger");

    /**
     * TRIGGER_ID_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TRIGGER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "triggerId", org.apache.thrift.protocol.TType.I32, (short) 1);

    /**
     * TRIGGER_NAME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TRIGGER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "triggerName", org.apache.thrift.protocol.TType.STRING, (short) 2);

    /**
     * CREATE_TIME_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "createTime", org.apache.thrift.protocol.TType.I64, (short) 3);

    /**
     * OPERATOR_ID_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "operatorId", org.apache.thrift.protocol.TType.I32, (short) 4);

    /**
     * TRIGGER_TYPE_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField TRIGGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "triggerType", org.apache.thrift.protocol.TType.STRING, (short) 5);

    /**
     * CRON_EXPRESSION_FIELD_DESC
     */
    private static final org.apache.thrift.protocol.TField CRON_EXPRESSION_FIELD_DESC = new org.apache.thrift.protocol.TField(
        "cronExpression", org.apache.thrift.protocol.TType.STRING, (short) 6);

    /**
     * SCHEMES
     */
    private static final Map<Class<? extends IScheme>, SchemeFactory> SCHEMES = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        SCHEMES.put(StandardScheme.class, new CronTriggerStandardSchemeFactory());
        SCHEMES.put(TupleScheme.class, new CronTriggerTupleSchemeFactory());
    }

    /**
     * triggerId
     */
    public int triggerId; // optional

    /**
     * triggerName
     */
    public String triggerName; // required

    /**
     * createTime
     */
    public long createTime; // optional

    /**
     * operatorId
     */
    public int operatorId; // optional

    /**
     * triggerType
     */
    public String triggerType; // optional

    /**
     * cronExpression
     */
    public String cronExpression; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        
        /**
         * TRIGGER_ID
         */
        TRIGGER_ID((short) 1, "triggerId"), TRIGGER_NAME((short) 2, "triggerName"), CREATE_TIME((short) 3, "createTime"), OPERATOR_ID(
            (short) 4, "operatorId"), 
        
        /**
         * TRIGGER_TYPE
         */
        TRIGGER_TYPE((short) 5, "triggerType"), CRON_EXPRESSION((short) 6,
            "cronExpression");

        /**
         * BY_NAME
         */
        private static final Map<String, _Fields> BY_NAME = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                BY_NAME.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         * @param fieldId <br>
         * @return <br>
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // TRIGGER_ID
                    return TRIGGER_ID;
                case 2: // TRIGGER_NAME
                    return TRIGGER_NAME;
                case 3: // CREATE_TIME
                    return CREATE_TIME;
                case 4: // OPERATOR_ID
                    return OPERATOR_ID;
                case 5: // TRIGGER_TYPE
                    return TRIGGER_TYPE;
                case 6: // CRON_EXPRESSION
                    return CRON_EXPRESSION;
                default:
                    return null;
            }
        }

        /**
         * Find the Fields constant that matches fieldId, throwing an exception if it is not found.
         * @param fieldId <br>
         * @return  <br>
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) {
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            }
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         * @param name <br>
         * @return <br>
         */
        public static _Fields findByName(String name) {
            return BY_NAME.get(name);
        }

        /**
         * thriftId
         */
        private final short thriftId;

        /**
         * fieldName
         */
        private final String fieldName;

        /**
         * _Fields
         * @param thriftId <br>
         * @param fieldName <br>
         */
        _Fields(short thriftId, String fieldName) {
            this.thriftId = thriftId;
            this.fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return thriftId;
        }

        public String getFieldName() {
            return fieldName;
        }
    }

    /**
     * TRIGGERID_ISSET_ID
     */
    private static final int TRIGGERID_ISSET_ID = 0;

    /**
     * CREATETIME_ISSET_ID
     */
    private static final int CREATETIME_ISSET_ID = 1;

    /**
     * OPERATORID_ISSET_ID
     */
    private static final int OPERATORID_ISSET_ID = 2;

    /**
     * issetBitfield
     */
    private byte issetBitfield = 0;

    /**
     * _Fields
     */
//    private static final _Fields optionals[] = {
//        _Fields.TRIGGER_ID, _Fields.CREATE_TIME, _Fields.OPERATOR_ID, _Fields.TRIGGER_TYPE
//    };

    /**
     * META_DATA_MAP
     */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> META_DATA_MAP;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
            _Fields.class);
        tmpMap.put(_Fields.TRIGGER_ID, new org.apache.thrift.meta_data.FieldMetaData("triggerId",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TRIGGER_NAME, new org.apache.thrift.meta_data.FieldMetaData("triggerName",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TRIGGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("triggerType",
            org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.CRON_EXPRESSION, new org.apache.thrift.meta_data.FieldMetaData("cronExpression",
            org.apache.thrift.TFieldRequirementType.REQUIRED, new org.apache.thrift.meta_data.FieldValueMetaData(
                org.apache.thrift.protocol.TType.STRING)));
        META_DATA_MAP = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CronTrigger.class, META_DATA_MAP);
    }

    /**
     * CronTrigger
     */
    public CronTrigger() {
    }

    /**
     * CronTrigger
     * @param triggerName <br>
     * @param cronExpression <br>
     */
    public CronTrigger(String triggerName, String cronExpression) {
        this();
        this.triggerName = triggerName;
        this.cronExpression = cronExpression;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     * @param other <br>
     */
    public CronTrigger(CronTrigger other) {
        issetBitfield = other.issetBitfield;
        this.triggerId = other.triggerId;
        if (other.isSetTriggerName()) {
            this.triggerName = other.triggerName;
        }
        this.createTime = other.createTime;
        this.operatorId = other.operatorId;
        if (other.isSetTriggerType()) {
            this.triggerType = other.triggerType;
        }
        if (other.isSetCronExpression()) {
            this.cronExpression = other.cronExpression;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @return <br>
     */
    public CronTrigger deepCopy() {
        return new CronTrigger(this);
    }

    @Override
    public void clear() {
        setTriggerIdIsSet(false);
        this.triggerId = 0;
        this.triggerName = null;
        setCreateTimeIsSet(false);
        this.createTime = 0;
        setOperatorIdIsSet(false);
        this.operatorId = 0;
        this.triggerType = null;
        this.cronExpression = null;
    }

    public int getTriggerId() {
        return this.triggerId;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param triggerId <br>
     * @return <br>
     */
    public CronTrigger setTriggerId(int triggerId) {
        this.triggerId = triggerId;
        setTriggerIdIsSet(true);
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetTriggerId() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, TRIGGERID_ISSET_ID);
    }

    /** Returns true if field triggerId is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetTriggerId() {
        return EncodingUtils.testBit(issetBitfield, TRIGGERID_ISSET_ID);
    }

    public void setTriggerIdIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, TRIGGERID_ISSET_ID, value);
    }

    public String getTriggerName() {
        return this.triggerName;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param triggerName <br>
     * @return <br>
     */
    public CronTrigger setTriggerName(String triggerName) {
        this.triggerName = triggerName;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetTriggerName() {
        this.triggerName = null;
    }

    /** Returns true if field triggerName is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetTriggerName() {
        return this.triggerName != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setTriggerNameIsSet(boolean value) {
        if (!value) {
            this.triggerName = null;
        }
    }

    public long getCreateTime() {
        return this.createTime;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param createTime <br>
     * @return <br>
     */
    public CronTrigger setCreateTime(long createTime) {
        this.createTime = createTime;
        setCreateTimeIsSet(true);
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetCreateTime() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, CREATETIME_ISSET_ID);
    }

    /** Returns true if field createTime is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetCreateTime() {
        return EncodingUtils.testBit(issetBitfield, CREATETIME_ISSET_ID);
    }

    public void setCreateTimeIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, CREATETIME_ISSET_ID, value);
    }

    public int getOperatorId() {
        return this.operatorId;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param operatorId <br>
     * @return <br>
     */
    public CronTrigger setOperatorId(int operatorId) {
        this.operatorId = operatorId;
        setOperatorIdIsSet(true);
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetOperatorId() {
        issetBitfield = EncodingUtils.clearBit(issetBitfield, OPERATORID_ISSET_ID);
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetOperatorId() {
        return EncodingUtils.testBit(issetBitfield, OPERATORID_ISSET_ID);
    }

    public void setOperatorIdIsSet(boolean value) {
        issetBitfield = EncodingUtils.setBit(issetBitfield, OPERATORID_ISSET_ID, value);
    }

    public String getTriggerType() {
        return this.triggerType;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param triggerType <br>
     * @return <br>
     */
    public CronTrigger setTriggerType(String triggerType) {
        this.triggerType = triggerType;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetTriggerType() {
        this.triggerType = null;
    }

    /** Returns true if field triggerType is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetTriggerType() {
        return this.triggerType != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setTriggerTypeIsSet(boolean value) {
        if (!value) {
            this.triggerType = null;
        }
    }

    public String getCronExpression() {
        return this.cronExpression;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param cronExpression <br>
     * @return <br>
     */
    public CronTrigger setCronExpression(String cronExpression) {
        this.cronExpression = cronExpression;
        return this;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br> <br>
     */
    public void unsetCronExpression() {
        this.cronExpression = null;
    }

    /** Returns true if field cronExpression is set (has been assigned a value) and false otherwise
     * @return <br>
     *  */
    public boolean isSetCronExpression() {
        return this.cronExpression != null;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param value <br>
     */
    public void setCronExpressionIsSet(boolean value) {
        if (!value) {
            this.cronExpression = null;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param field <br>
     * @param value <br>
     */
    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case TRIGGER_ID:
                if (value == null) {
                    unsetTriggerId();
                }
                else {
                    setTriggerId((Integer) value);
                }
                break;

            case TRIGGER_NAME:
                if (value == null) {
                    unsetTriggerName();
                }
                else {
                    setTriggerName((String) value);
                }
                break;

            case CREATE_TIME:
                if (value == null) {
                    unsetCreateTime();
                }
                else {
                    setCreateTime((Long) value);
                }
                break;

            case OPERATOR_ID:
                if (value == null) {
                    unsetOperatorId();
                }
                else {
                    setOperatorId((Integer) value);
                }
                break;

            case TRIGGER_TYPE:
                if (value == null) {
                    unsetTriggerType();
                }
                else {
                    setTriggerType((String) value);
                }
                break;

            case CRON_EXPRESSION:
                if (value == null) {
                    unsetCronExpression();
                }
                else {
                    setCronExpression((String) value);
                }
                break;
            default:;
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param field <br>
     * @return <br>
     */
    public Object getFieldValue(_Fields field) {
        switch (field) {
            case TRIGGER_ID:
                return Integer.valueOf(getTriggerId());

            case TRIGGER_NAME:
                return getTriggerName();

            case CREATE_TIME:
                return Long.valueOf(getCreateTime());

            case OPERATOR_ID:
                return Integer.valueOf(getOperatorId());

            case TRIGGER_TYPE:
                return getTriggerType();

            case CRON_EXPRESSION:
                return getCronExpression();
            default:;
        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     * @param field <br>
     * @return <br>
     *  */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case TRIGGER_ID:
                return isSetTriggerId();
            case TRIGGER_NAME:
                return isSetTriggerName();
            case CREATE_TIME:
                return isSetCreateTime();
            case OPERATOR_ID:
                return isSetOperatorId();
            case TRIGGER_TYPE:
                return isSetTriggerType();
            case CRON_EXPRESSION:
                return isSetCronExpression();
            default:;
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null) {
            return false;
        }
        if (that instanceof CronTrigger) {
            return this.equals((CronTrigger) that);
        }
        return false;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param that <br>
     * @return <br>
     */
    public boolean equals(CronTrigger that) {
        if (that == null) {
            return false;
        }

        boolean this_present_triggerId = true & this.isSetTriggerId();
        boolean that_present_triggerId = true & that.isSetTriggerId();
        if (this_present_triggerId || that_present_triggerId) {
            if (!(this_present_triggerId && that_present_triggerId)) {
                return false;
            }
            if (this.triggerId != that.triggerId) {
                return false;
            }
        }

        boolean this_present_triggerName = true & this.isSetTriggerName();
        boolean that_present_triggerName = true & that.isSetTriggerName();
        if (this_present_triggerName || that_present_triggerName) {
            if (!(this_present_triggerName && that_present_triggerName)) {
                return false;
            }
            if (!this.triggerName.equals(that.triggerName)) {
                return false;
            }
        }

        boolean this_present_createTime = true & this.isSetCreateTime();
        boolean that_present_createTime = true & that.isSetCreateTime();
        if (this_present_createTime || that_present_createTime) {
            if (!(this_present_createTime && that_present_createTime)) {
                return false;
            }
            if (this.createTime != that.createTime) {
                return false;
            }
        }

        boolean this_present_operatorId = true & this.isSetOperatorId();
        boolean that_present_operatorId = true & that.isSetOperatorId();
        if (this_present_operatorId || that_present_operatorId) {
            if (!(this_present_operatorId && that_present_operatorId)) {
                return false;
            }
            if (this.operatorId != that.operatorId) {
                return false;
            }
        }

        boolean this_present_triggerType = true & this.isSetTriggerType();
        boolean that_present_triggerType = true & that.isSetTriggerType();
        if (this_present_triggerType || that_present_triggerType) {
            if (!(this_present_triggerType && that_present_triggerType)) {
                return false;
            }
            if (!this.triggerType.equals(that.triggerType)) {
                return false;
            }
        }

        boolean this_present_cronExpression = true & this.isSetCronExpression();
        boolean that_present_cronExpression = true & that.isSetCronExpression();
        if (this_present_cronExpression || that_present_cronExpression) {
            if (!(this_present_cronExpression && that_present_cronExpression)) {
                return false;
            }
            if (!this.cronExpression.equals(that.cronExpression)) {
                return false;
            }
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_triggerId = true & (isSetTriggerId());
        list.add(present_triggerId);
        if (present_triggerId) {
            list.add(triggerId);
        }

        boolean present_triggerName = true & (isSetTriggerName());
        list.add(present_triggerName);
        if (present_triggerName) {
            list.add(triggerName);
        }

        boolean present_createTime = true & (isSetCreateTime());
        list.add(present_createTime);
        if (present_createTime) {
            list.add(createTime);
        }

        boolean present_operatorId = true & (isSetOperatorId());
        list.add(present_operatorId);
        if (present_operatorId) {
            list.add(operatorId);
        }

        boolean present_triggerType = true & (isSetTriggerType());
        list.add(present_triggerType);
        if (present_triggerType) {
            list.add(triggerType);
        }

        boolean present_cronExpression = true & (isSetCronExpression());
        list.add(present_cronExpression);
        if (present_cronExpression) {
            list.add(cronExpression);
        }

        return list.hashCode();
    }

    @Override
    public int compareTo(CronTrigger other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetTriggerId()).compareTo(other.isSetTriggerId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTriggerId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerId, other.triggerId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTriggerName()).compareTo(other.isSetTriggerName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTriggerName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerName, other.triggerName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCreateTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetOperatorId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTriggerType()).compareTo(other.isSetTriggerType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTriggerType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerType, other.triggerType);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCronExpression()).compareTo(other.isSetCronExpression());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCronExpression()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cronExpression, other.cronExpression);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param fieldId <br>
     * @return <br>
     */
    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param iprot <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        SCHEMES.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param oprot <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        SCHEMES.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("CronTrigger(");
        boolean first = true;

        if (isSetTriggerId()) {
            sb.append("triggerId:");
            sb.append(this.triggerId);
            first = false;
        }
        if (!first) {
            sb.append(", ");
        }
        sb.append("triggerName:");
        if (this.triggerName == null) {
            sb.append("null");
        }
        else {
            sb.append(this.triggerName);
        }
        first = false;
        if (isSetCreateTime()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("createTime:");
            sb.append(this.createTime);
            first = false;
        }
        if (isSetOperatorId()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("operatorId:");
            sb.append(this.operatorId);
            first = false;
        }
        if (isSetTriggerType()) {
            if (!first) {
                sb.append(", ");
            }
            sb.append("triggerType:");
            if (this.triggerType == null) {
                sb.append("null");
            }
            else {
                sb.append(this.triggerType);
            }
            first = false;
        }
        if (!first) {
            sb.append(", ");
        }
        sb.append("cronExpression:");
        if (this.cronExpression == null) {
            sb.append("null");
        }
        else {
            sb.append(this.cronExpression);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @throws org.apache.thrift.TException <br>
     */
    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        if (triggerName == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'triggerName' was not present! Struct: " + toString());
        }
        if (cronExpression == null) {
            throw new org.apache.thrift.protocol.TProtocolException(
                "Required field 'cronExpression' was not present! Struct: " + toString());
        }
        // check for sub-struct validity
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param out <br>
     * @throws java.io.IOException <br>
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
                out)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    /**
     * 
     * Description: <br> 
     *  
     * @author yang.zhipeng <br>
     * @taskId <br>
     * @param in <br>
     * @throws java.io.IOException <br>
     * @throws ClassNotFoundException <br>
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the
            // default constructor.
            issetBitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class CronTriggerStandardSchemeFactory implements SchemeFactory {
        public CronTriggerStandardScheme getScheme() {
            return new CronTriggerStandardScheme();
        }
    }

    private static class CronTriggerStandardScheme extends StandardScheme<CronTrigger> {

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param iprot <br>
         * @param struct <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void read(org.apache.thrift.protocol.TProtocol iprot, CronTrigger struct)
            throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // TRIGGER_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.triggerId = iprot.readI32();
                            struct.setTriggerIdIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // TRIGGER_NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.triggerName = iprot.readString();
                            struct.setTriggerNameIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // CREATE_TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.createTime = iprot.readI64();
                            struct.setCreateTimeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // OPERATOR_ID
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.operatorId = iprot.readI32();
                            struct.setOperatorIdIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // TRIGGER_TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.triggerType = iprot.readString();
                            struct.setTriggerTypeIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 6: // CRON_EXPRESSION
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.cronExpression = iprot.readString();
                            struct.setCronExpressionIsSet(true);
                        }
                        else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        /**
         * 
         * Description: <br> 
         *  
         * @author yang.zhipeng <br>
         * @taskId <br>
         * @param oprot <br>
         * @param struct <br>
         * @throws org.apache.thrift.TException <br>
         */
        public void write(org.apache.thrift.protocol.TProtocol oprot, CronTrigger struct)
            throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.isSetTriggerId()) {
                oprot.writeFieldBegin(TRIGGER_ID_FIELD_DESC);
                oprot.writeI32(struct.triggerId);
                oprot.writeFieldEnd();
            }
            if (struct.triggerName != null) {
                oprot.writeFieldBegin(TRIGGER_NAME_FIELD_DESC);
                oprot.writeString(struct.triggerName);
                oprot.writeFieldEnd();
            }
            if (struct.isSetCreateTime()) {
                oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
                oprot.writeI64(struct.createTime);
                oprot.writeFieldEnd();
            }
            if (struct.isSetOperatorId()) {
                oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
                oprot.writeI32(struct.operatorId);
                oprot.writeFieldEnd();
            }
            if (struct.triggerType != null) {
                if (struct.isSetTriggerType()) {
                    oprot.writeFieldBegin(TRIGGER_TYPE_FIELD_DESC);
                    oprot.writeString(struct.triggerType);
                    oprot.writeFieldEnd();
                }
            }
            if (struct.cronExpression != null) {
                oprot.writeFieldBegin(CRON_EXPRESSION_FIELD_DESC);
                oprot.writeString(struct.cronExpression);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class CronTriggerTupleSchemeFactory implements SchemeFactory {
        public CronTriggerTupleScheme getScheme() {
            return new CronTriggerTupleScheme();
        }
    }

    private static class CronTriggerTupleScheme extends TupleScheme<CronTrigger> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, CronTrigger struct)
            throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            oprot.writeString(struct.triggerName);
            oprot.writeString(struct.cronExpression);
            BitSet optionals = new BitSet();
            if (struct.isSetTriggerId()) {
                optionals.set(0);
            }
            if (struct.isSetCreateTime()) {
                optionals.set(1);
            }
            if (struct.isSetOperatorId()) {
                optionals.set(2);
            }
            if (struct.isSetTriggerType()) {
                optionals.set(3);
            }
            oprot.writeBitSet(optionals, 4);
            if (struct.isSetTriggerId()) {
                oprot.writeI32(struct.triggerId);
            }
            if (struct.isSetCreateTime()) {
                oprot.writeI64(struct.createTime);
            }
            if (struct.isSetOperatorId()) {
                oprot.writeI32(struct.operatorId);
            }
            if (struct.isSetTriggerType()) {
                oprot.writeString(struct.triggerType);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, CronTrigger struct)
            throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            struct.triggerName = iprot.readString();
            struct.setTriggerNameIsSet(true);
            struct.cronExpression = iprot.readString();
            struct.setCronExpressionIsSet(true);
            BitSet incoming = iprot.readBitSet(4);
            if (incoming.get(0)) {
                struct.triggerId = iprot.readI32();
                struct.setTriggerIdIsSet(true);
            }
            if (incoming.get(1)) {
                struct.createTime = iprot.readI64();
                struct.setCreateTimeIsSet(true);
            }
            if (incoming.get(2)) {
                struct.operatorId = iprot.readI32();
                struct.setOperatorIdIsSet(true);
            }
            if (incoming.get(3)) {
                struct.triggerType = iprot.readString();
                struct.setTriggerTypeIsSet(true);
            }
        }
    }

}
